<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_BaseLoggerElement_HMI" Id="{024becb4-36e5-0a14-1436-0e8a32c5de12}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_BaseLoggerElement_HMI EXTENDS FB_Base IMPLEMENTS ITF_BaseLoggerElement_HMI
VAR
	itfBaseLoggerConnector					: ITF_BaseLogger_HMI_Connector;			//bezpośredni łącznik do logera
	itfBaseLoggerElementConnector			: ITF_BaseLoggerElement_HMI_Connector;	//lacznik do FB_BaseLoggerElement np zeby wyciągnąć identyfikator
	refstBaseLoggerElementDataHMI			: REFERENCE TO ST_BaseLoggerElement_HMI;
	refstMemoryEvents						: REFERENCE TO ST_BaseEvents_Memory;	//referencja do tablicy zgłoszeń
	bIsInit									: BOOL;	//flaga informująca czy wszystkie interfejsy są dobrze przypisane
	bIsValidData							: bool;	//flaga informująca czy wszystkie dane sa podpięte 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="ITF_BaseLoggerElement_HMI" Id="{490d29d6-def9-07f2-16cf-bb21a6440bb9}" />
    <Folder Name="WiazanieZmiennych" Id="{4d450796-b575-0397-39db-94123d6241c4}" />
    <Method Name="CreateLinkToEventsMemory" Id="{95a4fe1d-262b-028d-22e6-1fe12c2c7cc8}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC CreateLinkToEventsMemory : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.refstMemoryEvents	REF= THIS^.itfBaseLoggerConnector.GetReferenceToStmemory ();


IF (__ISVALIDREF (THIS^.refstMemoryEvents)) THEN
	CreateLinkToEventsMemory		:= TRUE;
ELSE
	CreateLinkToEventsMemory		:= FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEventTableForIDItem" Id="{d7402387-758c-09da-06b8-6d4ae8c9312e}" FolderPath="ITF_BaseLoggerElement_HMI\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		09.09.2025		TC 4024.66
	Generuje tablicę zdarzeń dla podanego ID dla 0 dla wszystkich elementów
*)
METHOD PUBLIC GetEventTableForIDItem : BOOL
VAR_INPUT
	uiIdItem				: UINT;
END_VAR
VAR
	iI						: INT;
	bFilterIsActive			: BOOL;
	bUsunZListy				: BOOL;
	refstMemory				: REFERENCE TO ST_BaseEvents_Memory;
	refstListToDisplay		: REFERENCE TO ST_BaseHMIConnectorEvents_ListToDisplay;
	refstFilter				: REFERENCE TO ST_BaseHMIConnectorEvents_Filter;
	stRowFromMemory			: ST_BaseEvents_RowInMemory;
	stItemInformation		: ST_BaseLogger_ItemDataToDisplay;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
	sprawdzenie czy jest coś nowego - tak generuj
	jak już jest wygenerowana jakaś lista i zmienił się filtr - tak to generuj

*)
IF (THIS^.refstMemoryEvents.iNumberOfRow > 0) THEN
	refstMemory				REF= THIS^.refstMemoryEvents;
	refstListToDisplay		REF= THIS^.refstBaseLoggerElementDataHMI.arrListOfEventsToDisplay;
	refstFilter				REF= THIS^.refstBaseLoggerElementDataHMI.stFilter;
	bFilterIsActive				:= 	refstFilter.bActive OR 
									refstFilter.bNotActive OR
									refstFilter.bIDEvent OR
									refstFilter.bIDItem;
	FOR iI := 1 TO GVL_BaseConstans.MAX_LICZBA_RODZAJOW_ZGLOSZEN DO
		bFilterIsActive			:= bFilterIsActive OR refstFilter.arrSelectedEventCategory [iI];
	END_FOR

	IF (THIS^.itfBaseLoggerConnector.GetChangeInMemory () OR bFilterIsActive) THEN
		THIS^.itfBaseLoggerConnector.ResetChangeInMemory ();
		(*	Wyczyszczenie tablicy wyświetlania		*)
		Tc2_System.MEMSET (
			destAddr		:= ADR (refstListToDisplay.arrToDisplay),
			fillByte		:= 0,
			n				:= SIZEOF (refstListToDisplay.arrToDisplay)
		);
		refstListToDisplay.iNumberOfRow		:= 0;
		FOR iI := 1 TO refstMemory.iNumberOfRow DO
			IF (uiIdItem = refstMemory.arrRow [iI].uiIDItem OR uiIdItem = 0) THEN
				stRowFromMemory	:= refstMemory.arrRow [iI];
				stItemInformation		:= THIS^.itfBaseLoggerConnector.GetIfmormationFromItem (uiIDItem := uiIdItem, uiIDEvent := stRowFromMemory.uiIDEvent);
				
				bUsunZListy		:= FALSE;
				bUsunZListy		:= bUsunZListy OR (refstFilter.bActive AND NOT stRowFromMemory.bActive);
				bUsunZListy		:= bUsunZListy OR (refstFilter.bNotActive AND stRowFromMemory.bActive);
				bUsunZListy		:= bUsunZListy OR (refstFilter.bIDItem	AND stRowFromMemory.uiIDItem <> refstFilter.uiIDItem);
				bUsunZListy		:= bUsunZListy OR (refstFilter.bIDEvent AND stRowFromMemory.uiIDEvent <> refstFilter.uiIDEvent);			
//				bUsunZListy 	:= bUsunZListy OR ((refstFilter.bAlarmy OR refstFiltr.bBledy OR 
//													refstFilter.bSafety OR refstFiltr.bWiadomosci) AND	//jak jest który kolwiek z warunków  
//															NOT ((refstFiltr.bAlarmy AND stWynik.eRodzajZgloszenia = B_Baza.E_Zgloszenia_Rodzaj.ALARM) OR													// i dodatowo jak rodzaj zgłoszenia nie pokrywa się z rodzajem w wierszu to wyklucz 
//																(refstFiltr.bBledy AND stWynik.eRodzajZgloszenia = B_Baza.E_Zgloszenia_Rodzaj.BLAD) OR														//warunek odwrotny do tych co jest w aktywny nieaktywny
//														(refstFiltr.bSafety AND stWynik.eRodzajZgloszenia = B_Baza.E_Zgloszenia_Rodzaj.SAFETY) OR
//														(refstFiltr.bWiadomosci AND stWynik.eRodzajZgloszenia = B_Baza.E_Zgloszenia_Rodzaj.WIADOMOSC)));
		//przeddział czasowy
(*				IF (NOT bUsunZListy) THEN
					refstListToDisplay.iNumberOfRow		:= refstListToDisplay.iNumberOfRow + 1;
//					refstListToDisplay.arrToDisplay [refstListToDisplay.iNumberOfRow];
					iI_Wyswietlanych	:= iI_Wyswietlanych + 1;
//					IF (THIS^.refstDane.uiIDZgloszeniaWybrany = THIS^.stPamiec.arrWiersz [iI_Pamietanych].uiIDZgloszenia AND NOT THIS^.refstDane.bZaznaczony) THEN
					IF (refstLista.uiIDZgloszeniaWybrany = stWiersz.uiIDZgloszenia AND NOT refstLista.bZaznaczony) THEN
						refstLista.iWybranyZListy		:= iI_Wyswietlanych;
						refstLista.bZaznaczony			:= TRUE;
					END_IF
					refstLista.arrDoWyswietlenia [iI_Wyswietlanych].uiIDZgloszenia			:= stWiersz.uiIDZgloszenia;
					refstLista.arrDoWyswietlenia [iI_Wyswietlanych].uiID					:= stWynik.uiIDElementu;
					refstLista.arrDoWyswietlenia [iI_Wyswietlanych].bAktywne				:= stWiersz.bAktywne;
					refstLista.arrDoWyswietlenia [iI_Wyswietlanych].sKod					:= stWynik.sKodElementu; 
					refstLista.arrDoWyswietlenia [iI_Wyswietlanych].bIgnorujPowtorzenia		:= stWiersz.bIgnorujPowtorzenia;
					refstLista.arrDoWyswietlenia [iI_Wyswietlanych].bPotwierdz				:= stWiersz.bPotwierdz;
					refstLista.arrDoWyswietlenia [iI_Wyswietlanych].bPotwierdzone			:= stWiersz.bPotwierdzone;
			
					THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].sStart					:= THIS^.itfCzas.Konwertuj_DT_String (inDT := stWiersz.dtStart);  //DELETE (TO_STRING (stWiersz.dtStart), 3, 1);
					IF (TO_STRING (stWiersz.dtZatwierdzenie) <> 'DT#1970-01-01-00:00:00') THEN
						THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].sZatwierdzenie		:= THIS^.itfCzas.Konwertuj_DT_String (inDT := stWiersz.dtZatwierdzenie);	// DELETE (TO_STRING (stWiersz.dtZatwierdzenie), 3, 1);
					ELSE
						THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].sZatwierdzenie		:= '';
					END_IF
					IF (TO_STRING (TO_STRING (stWiersz.dtKoniec)) <> 'DT#1970-01-01-00:00:00') THEN
						THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].sKoniec			:= THIS^.itfCzas.Konwertuj_DT_String (inDT := stWiersz.dtKoniec);	//DELETE (TO_STRING (TO_STRING (stWiersz.dtKoniec)), 3, 1);
					ELSE
						THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].sKoniec			:= '';
					END_IF

					THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].sRodzajZgloszenia		:= stWynik.sRodzajZgloszenia; 
					THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].uiLicznikPowtorzen	:= stWiersz.uiLicznikPowtorzen;
					wstmp																		:= stWynik.wsOpis;
					iDltmp																		:= WLEN (wstmp);
					IF (iDltmp > 100) THEN
						wstmp																	:= WDELETE (stWynik.wsOpis, iDltmp - 100, iDltmp);
					END_IF
					THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].wsOpis					:= wstmp;
					THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].wsOpisPelny			:= stWynik.wsOpis;
					THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].wsTekstElementu		:= stWynik.wsTekstElementu;


	(*	Informacja o ilosciach zgloszen na wyswietlanej liście 		*)

					iIloscZgloszen				:= iIloscZgloszen + 1;
					IF (THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].bAktywne) THEN
						iIloscAktywnych			:= iIloscAktywnych + 1;
					ELSE
						iIloscNieAktywnych		:= iIloscNieAktywnych + 1;
					END_IF
					IF (THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].bPotwierdz AND 
						NOT THIS^.refstDane.arrDoWyswietlenia [iI_Wyswietlanych].bPotwierdzone) THEN
						iIloscDoPotwierdzenia	:= iIloscDoPotwierdzenia + 1;
					END_IF
					arrIlosc [stWynik.eRodzajZgloszenia]	:= arrIlosc [stWynik.eRodzajZgloszenia] + 1;
				END_IF
*)
			END_IF
		END_FOR
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetYourEventTable" Id="{368f0f11-8005-0717-354f-559c5b808c9c}" FolderPath="ITF_BaseLoggerElement_HMI\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		09.09.2025		TC 4024.66
	Zwraca tablicę swoich zdarzeń
*)
METHOD PUBLIC GetYourEventTable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.GetEventTableForIDItem (uiIdItem := THIS^.itfBaseLoggerElementConnector.GetID ());		//przygotowanie tablicy dla siebie
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInit" Id="{ff032025-bb47-0541-2e34-4756feab4ddd}">
      <Declaration><![CDATA[(*			
	RAFALOS
	Rafał Osajda		23.09.2025		TC 4024.66
	Zwraca informację czy dane są podpięte do systemu
*)
METHOD PUBLIC IsInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsInit			:= THIS^.bIsInit;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsValidData" Id="{f2f46b20-d299-05ed-341f-5d54b19130b7}">
      <Declaration><![CDATA[(*			
	RAFALOS
	Rafał Osajda		23.09.2025		TC 4024.66
	Zwraca flagę przypisywaną w FB_Init tworzonego elementu
*)
METHOD IsValidData : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsValidData				:= THIS^.bIsValidData;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>