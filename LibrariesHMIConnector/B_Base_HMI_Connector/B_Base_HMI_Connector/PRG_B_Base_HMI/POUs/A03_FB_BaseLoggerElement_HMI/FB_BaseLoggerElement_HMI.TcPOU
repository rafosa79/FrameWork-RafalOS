<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_BaseLoggerElement_HMI" Id="{024becb4-36e5-0a14-1436-0e8a32c5de12}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_BaseLoggerElement_HMI EXTENDS FB_Base IMPLEMENTS ITF_BaseLoggerElement_HMI
VAR
	itfBaseLoggerConnector					: ITF_BaseLogger_HMI_Connector;			//bezpośredni łącznik do logera
	itfBaseLoggerElementConnector			: ITF_BaseLoggerElement_HMI_Connector;	//lacznik do FB_BaseLoggerElement np zeby wyciągnąć identyfikator
	refstBaseLoggerElementDataHMI			: REFERENCE TO ST_BaseLoggerElement_HMI;
	refstMemoryEvents						: REFERENCE TO ST_BaseEvents_Memory;	//referencja do tablicy zgłoszeń
	bIsInit									: BOOL;	//flaga informująca czy wszystkie interfejsy są dobrze przypisane
	bIsValidData							: bool;	//flaga informująca czy wszystkie dane sa podpięte 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ ]]></ST>
    </Implementation>
    <Folder Name="ITF_BaseLoggerElement_HMI" Id="{490d29d6-def9-07f2-16cf-bb21a6440bb9}" />
    <Folder Name="WiazanieZmiennych" Id="{4d450796-b575-0397-39db-94123d6241c4}" />
    <Method Name="CopyDataToDisplay" Id="{75592a02-6e87-039e-0670-1b22f05f769c}" FolderPath="ITF_BaseLoggerElement_HMI\">
      <Declaration><![CDATA[METHOD PRIVATE CopyDataToDisplay : BOOL
VAR_INPUT
	refarrToDisplay				: REFERENCE TO ARRAY [1..GVL_BaseConstans.MAX_EVENTS_TO_SHOW] OF ST_BaseHMIConnectorEvents_ListToDisplayRow;
	iNumberOfRow				: INT;
	stRowFromMemory				: ST_BaseEvents_RowInMemory;
	stItemInformation			: ST_BaseLogger_ItemDataToDisplay;
END_VAR
VAR
	wstmpDescriptionFull		: WSTRING;
	wstmpDescription			: WSTRING;
	iDltmp						: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[refarrToDisplay [iNumberOfRow].uiIDEvent			:= stRowFromMemory.uiIDEvent;
refarrToDisplay [iNumberOfRow].uiIDItem				:= stRowFromMemory.uiIDItem;
refarrToDisplay [iNumberOfRow].bActive				:= stRowFromMemory.bActive;
refarrToDisplay [iNumberOfRow].sCode				:= stItemInformation.sCode; 
refarrToDisplay [iNumberOfRow].bIgnoreRepetitions	:= stRowFromMemory.bIgnoreRepetitions;
refarrToDisplay [iNumberOfRow].bConfirm				:= stRowFromMemory.bConfirm;
refarrToDisplay [iNumberOfRow].bConfirmed			:= stRowFromMemory.bConfirmed;

refarrToDisplay [iNumberOfRow].sStart				:= THIS^.refstCommonData.itfTime.BaseDTToString (inDT := stRowFromMemory.dtStart);
IF (TO_STRING (stRowFromMemory.dtConfirmed) <> 'DT#1970-01-01-00:00:00') THEN
	refarrToDisplay [iNumberOfRow].sConfirmed		:= THIS^.refstCommonData.itfTime.BaseDTToString (inDT := stRowFromMemory.dtConfirmed);
ELSE
	refarrToDisplay [iNumberOfRow].sConfirmed		:= '';
END_IF
IF (TO_STRING (TO_STRING (stRowFromMemory.dtFinish)) <> 'DT#1970-01-01-00:00:00') THEN
	refarrToDisplay [iNumberOfRow].sFinish			:= THIS^.refstCommonData.itfTime.BaseDTToString (inDT := stRowFromMemory.dtFinish);
ELSE
	refarrToDisplay [iNumberOfRow].sFinish			:= '';
END_IF

refarrToDisplay [iNumberOfRow].sEventCategory		:= stItemInformation.sEventCategory; 
refarrToDisplay [iNumberOfRow].uiRepetitionCounter	:= stItemInformation.uiRepetitionCounter;
wstmpDescriptionFull		:= THIS^.GetTextFromLabel (stLabel	:= stItemInformation.stDescription);
iDltmp												:= WLEN (wstmpDescriptionFull);
IF (iDltmp > 100) THEN
	wstmpDescription								:= WDELETE (wstmpDescriptionFull, iDltmp - 100, iDltmp);
END_IF
refarrToDisplay [iNumberOfRow].wsDescription		:= wstmpDescription;
refarrToDisplay [iNumberOfRow].wsDescriptionFull	:= wstmpDescriptionFull;
refarrToDisplay [iNumberOfRow].wsNameOfitem			:= THIS^.GetTextFromLabel (stLabel := stItemInformation.stItemName);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateLinkToEventsMemory" Id="{95a4fe1d-262b-028d-22e6-1fe12c2c7cc8}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC CreateLinkToEventsMemory : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.refstMemoryEvents	REF= THIS^.itfBaseLoggerConnector.GetReferenceToStmemory ();


IF (__ISVALIDREF (THIS^.refstMemoryEvents)) THEN
	CreateLinkToEventsMemory		:= TRUE;
ELSE
	CreateLinkToEventsMemory		:= FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEventTableForIDItem" Id="{d7402387-758c-09da-06b8-6d4ae8c9312e}" FolderPath="ITF_BaseLoggerElement_HMI\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		09.09.2025		TC 4024.66
	Generuje tablicę zdarzeń dla podanego ID dla 0 dla wszystkich elementów
*)
METHOD PUBLIC GetEventTableForIDItem : BOOL
VAR_INPUT
	uiIdItem				: UINT;
END_VAR
VAR_INST
	bFilterIsActivePrevius	: BOOL;	
END_VAR
VAR
	iI						: INT;
	bFilterIsActive			: BOOL;
	bUsunZListy				: BOOL;
	btmpUsunZListy			: BOOL;
	refstMemory				: REFERENCE TO ST_BaseEvents_Memory;
	refstListToDisplay		: REFERENCE TO ST_BaseHMIConnectorEvents_ListToDisplay;
	refstFilter				: REFERENCE TO ST_BaseHMIConnectorEvents_Filter;
	refstActionButtons		: REFERENCE TO ST_BaseHMIConnectorEvents_ActionButtuns;
	stRowFromMemory			: ST_BaseEvents_RowInMemory;
	stItemInformation		: ST_BaseLogger_ItemDataToDisplay;
(*	Ilosci zdarzen wyswietlanych na liscie	*)
	stNumberEventToDisplay	: ST_BaseEvents_ActiveEvents;
//
	iIAck: INT;
	iIClose: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
	sprawdzenie czy jest coś nowego - tak generuj
	jak już jest wygenerowana jakaś lista i zmienił się filtr - tak to generuj

*)
IF (THIS^.refstMemoryEvents.iNumberOfRow > 0) THEN

	refstMemory				REF= THIS^.refstMemoryEvents;
	refstListToDisplay		REF= THIS^.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay;
	refstFilter				REF= THIS^.refstBaseLoggerElementDataHMI.stFilter;
	refstActionButtons		REF= THIS^.refstBaseLoggerElementDataHMI.stButtons;
	bFilterIsActive			:= GetIsActiveFilter (refstFilter := refstFilter);		//sprawdzenie czy jest aktywny filtr
	
	IF (THIS^.itfBaseLoggerConnector.GetChangeInMemory () OR bFilterIsActive OR bFilterIsActivePrevius) THEN
		bFilterIsActivePrevius	:= bFilterIsActive;

		THIS^.itfBaseLoggerConnector.ResetChangeInMemory ();
		(*	Wyczyszczenie tablicy wyświetlania		*)
		Tc2_System.MEMSET (
			destAddr		:= ADR (refstListToDisplay.arrToDisplay),
			fillByte		:= 0,
			n				:= SIZEOF (refstListToDisplay.arrToDisplay)
		);
		refstListToDisplay.iNumberOfRow		:= 0;
		FOR iI := 1 TO refstMemory.iNumberOfRow DO
			IF (uiIdItem = refstMemory.arrRow [iI].uiIDItem OR uiIdItem = 0) THEN
				stRowFromMemory			:= refstMemory.arrRow [iI];
				stItemInformation		:= THIS^.itfBaseLoggerConnector.GetInformationFromItem (uiIDItem := uiIdItem, uiIDEvent := stRowFromMemory.uiIDEvent);
				bUsunZListy		:= THIS^.RemoveRowFormList (
										refstFilter 		:= refstFilter, 
										uiIDEvent 			:= stRowFromMemory.uiIDEvent, 
										uiIDItem 			:=  stRowFromMemory.uiIDItem,
										bActive				:= stRowFromMemory.bActive,
										stItemInformation	:= stItemInformation
									);
				IF (NOT bUsunZListy) THEN
					refstListToDisplay.iNumberOfRow		:= refstListToDisplay.iNumberOfRow + 1;
					THIS^.CopyDataToDisplay (
						refarrToDisplay					:= refstListToDisplay.arrToDisplay,
						iNumberOfRow					:= refstListToDisplay.iNumberOfRow,
						stRowFromMemory					:= stRowFromMemory,
						stItemInformation				:= stItemInformation
					);
	(*	Informacja o ilosciach zgloszen na wyswietlanej liście 		*)
					stNumberEventToDisplay.iTotalNumer	:= stNumberEventToDisplay.iTotalNumer + 1;
					IF (refstListToDisplay.arrToDisplay [refstListToDisplay.iNumberOfRow].bActive) THEN
						stNumberEventToDisplay.iNumberOfActive	:= stNumberEventToDisplay.iNumberOfActive + 1;
						stNumberEventToDisplay.arrNumberOfActive [stItemInformation.eEventCategory] := stNumberEventToDisplay.arrNumberOfActive [stItemInformation.eEventCategory] + 1;
						stNumberEventToDisplay.arrActive [stItemInformation.eEventCategory]	:= TRUE;
					END_IF
					IF (refstListToDisplay.arrToDisplay [refstListToDisplay.iNumberOfRow].bConfirm AND 
						NOT refstListToDisplay.arrToDisplay [refstListToDisplay.iNumberOfRow].bConfirmed) THEN
						stNumberEventToDisplay.iNumberOfActiveWithConfirmation	:= stNumberEventToDisplay.iNumberOfActiveWithConfirmation + 1;
					END_IF
					stNumberEventToDisplay.arrTotalNumer [stItemInformation.eEventCategory] := stNumberEventToDisplay.arrTotalNumer [stItemInformation.eEventCategory] + 1;
				END_IF	//usuwanie z listy
			END_IF
	(*	Liczba zgłoszeń większa od tych co wyświetlamy	starsze można zobaczyć na kompie po podłaczeniu 	*)
			IF (refstListToDisplay.iNumberOfRow = TO_INT (GVL_BaseConstans.MAX_EVENTS_TO_SHOW)) THEN
				EXIT;
			END_IF
		END_FOR	//koniec przechodzenia przez wiersze pamięci
//		stAktywneZgloszenia								:= THIS^.itfSPM.ZwrocInformacjeOStanieZgloszen ();

	(*	Informacja o ilosciach zgloszen		*)
	IF (uiIdItem > 0) THEN
		THIS^.PrepareQuantitiesForDisplay (
			stCounted		:= stNumberEventToDisplay,
			stFromLogger	:= THIS^.itfBaseLoggerConnector.GetEventCountsForItem (uiIDItem := uiIDItem)
		);
	ELSE
		THIS^.PrepareQuantitiesForDisplay (
			stCounted		:= stNumberEventToDisplay,
			stFromLogger	:= THIS^.itfBaseLoggerConnector.GetEventCounts ()
		);
	END_IF

(*		
		THIS^.refstDane.stIlosciZgloszenNaLiscie.sIloscZgloszen			:= THIS^.PrzygotujILoscWYswietlanychZdarzen (iIlosc := iIloscZgloszen, iIloscLoger := stAktywneZgloszenia.iIloscWszystkich);
		THIS^.refstDane.stIlosciZgloszenNaLiscie.bJestZgloszenie		:= stAktywneZgloszenia.iIloscWszystkich > 0;
		THIS^.refstDane.stIlosciZgloszenNaLiscie.sIloscDoPotwierdzenia	:= THIS^.PrzygotujILoscWYswietlanychZdarzen (iIlosc := iIloscDoPotwierdzenia, iIloscLoger := stAktywneZgloszenia.iIloscAktywnychZPotwierdzeniem);
		THIS^.refstDane.stIlosciZgloszenNaLiscie.bJestDoPotwierdzenia	:= stAktywneZgloszenia.iIloscAktywnychZPotwierdzeniem > 0;
		THIS^.refstDane.stIlosciZgloszenNaLiscie.sIloscAktywnych		:= THIS^.PrzygotujILoscWYswietlanychZdarzen (iIlosc := iIloscAktywnych, iIloscLoger := stAktywneZgloszenia.iIloscAktywnych);
		THIS^.refstDane.stIlosciZgloszenNaLiscie.bJestAktywne			:= stAktywneZgloszenia.iIloscAktywnych > 0;
		THIS^.refstDane.stIlosciZgloszenNaLiscie.sIloscNieAktywnych		:= THIS^.PrzygotujILoscWYswietlanychZdarzen (iIlosc := iIloscNieAktywnych, iIloscLoger := (stAktywneZgloszenia.iIloscWszystkich - stAktywneZgloszenia.iIloscAktywnych));
		THIS^.refstDane.stIlosciZgloszenNaLiscie.bJestNieAktywne		:= (stAktywneZgloszenia.iIloscWszystkich - stAktywneZgloszenia.iIloscAktywnych) > 0;

		FOR iI := 1 TO B_Baza.STALE.MAX_LICZBA_RODZAJOW_ZGLOSZEN DO
			THIS^.refstDane.stIlosciZgloszenNaLiscie.arrIlosc [iI]		:= THIS^.PrzygotujILoscWYswietlanychZdarzen (iIlosc := arrIlosc [iI], iIloscLoger := stAktywneZgloszenia.arrIloscWszystkich [iI]);
			THIS^.refstDane.stIlosciZgloszenNaLiscie.arrJest [iI]		:= stAktywneZgloszenia.arrIloscWszystkich [iI] > 0;
		END_FOR

		THIS^.refstDane.stPrzyciski.bPotwierdzZgloszeniaAktywny			:= iIloscDoPotwierdzenia = 0;
		THIS^.refstDane.stPrzyciski.bZamknijZgloszeniaAktywny			:= iIloscAktywnych = 0;

//
		IF (THIS^.refstDane.uiIDZgloszeniaWybrany > 0 AND NOT THIS^.refstDane.bZaznaczony) THEN
			THIS^.refstDane.uiIDZgloszeniaWybrany	:= 0;
			THIS^.refstDane.iWybranyZListy			:= -1;
			THIS^.refstDane.iWybranyZListy_Pop		:= -1;
		END_IF
		THIS^.refstDane.uiILoscZgloszenWSystemie	:= THIS^.itfSPM.ZwrocIloscZgloszenWSystemie ();
		THIS^.refstDane.uiIloscElementowWSystemie	:= THIS^.itfSPM.ZwrocIloscElementowWSystemieZgloszen ();
*)		
	END_IF

	(*	Wybor zgloszenia z listy	*)

//	IF ((refstListToDisplay.iSelectedRow <> refstListToDisplay.iSelectedRowPrevius AND refstListToDisplay.bSelected) OR 
//		refstFilter.bbOdswierzInfo ) THEN
//		THIS^.UzupelnijDaneSzczegolowe ();
//	ELSIF (THIS^.refstDane.iWybranyZListy < 0 OR THIS^.refstDane.iWybranyZListy > THIS^.refstDane.iIloscWierszyDoWyswietlenia) THEN
//		THIS^.refstDane.stPrzyciski.bZamknijZgloszenieAktywny	:= FALSE;
//		THIS^.refstDane.stPrzyciski.bPotwierdzZgloszenieAktywny	:= FALSE;
//		THIS^.refstDane.iWybranyZListy							:= -1;
//		THIS^.refstDane.iWybranyZListy_Pop						:= -1;
//	END_IF 
	
	(*	Obsługa przycisków zamykania i potwierrdzania zgłoszeń	*)

//	IF (THIS^.refstDane.stPrzyciski.bPotwierdzZgloszenie) THEN //potwierdz zgłoszenie
//		IF (refstListToDisplay.arrToDisplay [THIS^.refstBaseLoggerElementDataHMI.iSelectedRow].bConfirm AND 
//			NOT refstListToDisplay.arrToDisplay [THIS^.refstBaseLoggerElementDataHMI.iSelectedRow].bConfirmed) THEN
//			
//			THIS^.itfSPM.PotwierdzZgloszenieOID (uiIDZgloszenia			:= THIS^.refstDane.uiIDZgloszeniaWybrany);
//		END_IF
//	END_IF

//	IF (THIS^.refstDane.stPrzyciski.bZamknijZgloszenie) THEN	//zamknij zgłoszenie
//		IF (THIS^.refstDane.arrDoWyswietlenia [THIS^.refstDane.iWybranyZListy].bAktywne OR 
//			THIS^.refstDane.arrDoWyswietlenia [THIS^.refstDane.iWybranyZListy].sKoniec <> '') THEN
//			THIS^.itfSPM.WylaczZgloszenieOID (uiIDZgloszenia			:= THIS^.refstDane.uiIDZgloszeniaWybrany);
//		END_IF
//	END_IF
(*
	IF (THIS^.refstBaseLoggerElementDataHMI.stButtons.bAcknowledgeAll) THEN //potwierdz wszystkie niepotwierdzone zgłoszenie
		FOR iIAck := 1 TO TO_INT (refstListToDisplay.iNumberOfRow) DO
			IF (refstListToDisplay.arrToDisplay [iIAck].bConfirm AND 
				NOT refstListToDisplay.arrToDisplay [iIAck].bConfirmed) THEN
				THIS^.itfSPM.PotwierdzZgloszenieOID (uiIDZgloszenia			:= THIS^.refstDane.arrDoWyswietlenia [iI_Zamykania].uiIDZgloszenia);
			END_IF
		END_FOR
	END_IF
	IF (THIS^.refstBaseLoggerElementDataHMI.stButtons.bCloseAll) THEN	//zamknij wszystkie nie zamnknięte zgłoszenie
		FOR iIClose := 1 TO TO_INT (refstListToDisplay.iNumberOfRow) DO
			IF (refstListToDisplay.arrToDisplay [iIClose].bActive OR refstListToDisplay.arrToDisplay [iIClose].sFinish <> '') THEN
				THIS^.itfSPM.WylaczZgloszenieOID (uiIDZgloszenia:= THIS^.refstDane.arrDoWyswietlenia [iI_Zamykania].uiIDZgloszenia);
			END_IF
		END_FOR
	END_IF
	
	
	THIS^.refstBaseLoggerElementDataHMI.bOdswierzListe		:= THIS^.refstDane.stPrzyciski.bPotwierdzZgloszenie OR THIS^.refstDane.stPrzyciski.bZamknijZgloszenie OR
															THIS^.refstDane.stPrzyciski.bPotwierdzZgloszenia OR THIS^.refstDane.stPrzyciski.bZamknijZgloszenia;
	THIS^.refstBaseLoggerElementDataHMI.bOdswierzInfo		:= THIS^.refstDane.stPrzyciski.bPotwierdzZgloszenie OR THIS^.refstDane.stPrzyciski.bZamknijZgloszenie OR
															THIS^.refstDane.stPrzyciski.bPotwierdzZgloszenia OR THIS^.refstDane.stPrzyciski.bZamknijZgloszenia;																
	refstActionButtons.bAcknowledgeSelected					:= FALSE;
	refstActionButtons.bCloseSelected						:= FALSE;
	refstActionButtons.bAcknowledgeAll						:= FALSE;
	refstActionButtons.bCloseAll							:= FALSE;	
*)
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIsActiveFilter" Id="{79a84ee2-6eaf-0e54-0e23-81a9e7b0b6f8}" FolderPath="ITF_BaseLoggerElement_HMI\">
      <Declaration><![CDATA[METHOD PRIVATE GetIsActiveFilter : BOOL
VAR_INPUT
	refstFilter				: REFERENCE TO ST_BaseHMIConnectorEvents_Filter;
END_VAR
VAR
	bResult: BOOL;
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bResult				:= refstFilter.bActive OR 
						refstFilter.bNotActive OR
						refstFilter.bIDEvent OR
						refstFilter.bIDItem;
FOR iI := 1 TO GVL_BaseConstans.NUMBER_OF_EVENT_CATEGORIES DO
	bResult			:= bResult OR refstFilter.arrSelectedEventCategory [iI];
END_FOR

GetIsActiveFilter	:= bResult;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTextFromLabel" Id="{a9b62345-93c3-08b6-28c4-c9ac0ac3d039}">
      <Declaration><![CDATA[METHOD PROTECTED GetTextFromLabel : WSTRING
VAR_INPUT
	stLabel				: ST_BaseLabel;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetTextFromLabel			:= stLabel.arrText [refstCommonData.itfLocaciotn.GetLocation ()];
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetYourEventTable" Id="{368f0f11-8005-0717-354f-559c5b808c9c}" FolderPath="ITF_BaseLoggerElement_HMI\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		09.09.2025		TC 4024.66
	Zwraca tablicę swoich zdarzeń
*)
METHOD PUBLIC GetYourEventTable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.GetEventTableForIDItem (uiIdItem := THIS^.itfBaseLoggerElementConnector.GetID ());		//przygotowanie tablicy dla siebie
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInit" Id="{ff032025-bb47-0541-2e34-4756feab4ddd}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[(*			
	RAFALOS
	Rafał Osajda		23.09.2025		TC 4024.66
	Zwraca informację czy dane są podpięte do systemu
*)
METHOD PUBLIC IsInit : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsInit			:= THIS^.bIsInit;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsLinkedReferences" Id="{0bb5653a-e044-0c0e-035c-5823debef6f0}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC IsLinkedReferences : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (__ISVALIDREF (THIS^.refstBaseLoggerElementDataHMI)) THEN
	IsLinkedReferences			:= TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsValidData" Id="{f2f46b20-d299-05ed-341f-5d54b19130b7}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[(*			
	RAFALOS
	Rafał Osajda		23.09.2025		TC 4024.66
	Zwraca flagę przypisywaną w FB_Init tworzonego elementu
*)
METHOD IsValidData : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsValidData				:= THIS^.bIsValidData;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PrepareQuantitiesForDisplay" Id="{4a51ff7a-bc42-01f0-2da8-11249a1d4598}">
      <Declaration><![CDATA[METHOD PRIVATE PrepareQuantitiesForDisplay : BOOL
VAR_INPUT
	stCounted			: ST_BaseEvents_ActiveEvents;
	stFromLogger		: ST_BaseEvents_ActiveEvents;
END_VAR

VAR
	iI: INT;
	stmp1: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stmp1	:= CONCAT (stmp1,TO_STRING (stCounted.iNumberOfActiveWithConfirmation));
stmp1	:= CONCAT (stmp1, '/');
stmp1	:= CONCAT (stmp1, TO_STRING (stFromLogger.iNumberOfActiveWithConfirmation));

THIS^.refstBaseLoggerElementDataHMI.stButtons.sAcknowledgeAll		:= stmp1;
THIS^.refstBaseLoggerElementDataHMI.stButtons.sAcknowledgeSelected	:= '1/1';

stmp1	:= CONCAT ('',TO_STRING (stCounted.iNumberOfActive));
stmp1	:= CONCAT (stmp1, '/');
stmp1	:= CONCAT (stmp1, TO_STRING (stFromLogger.iNumberOfActive));
THIS^.refstBaseLoggerElementDataHMI.stButtons.sCloseAll				:= stmp1;
THIS^.refstBaseLoggerElementDataHMI.stButtons.sCloseSelected		:= '1/1';

FOR iI := 1	TO GVL_BaseConstans.NUMBER_OF_EVENT_CATEGORIES DO
	THIS^.refstBaseLoggerElementDataHMI.stFilter.arrTextOnEventCategory [iI]	:= 
		CONCAT (TO_STRING (stCounted.arrTotalNumer [iI]), CONCAT ('/',TO_STRING (stFromLogger.arrTotalNumer [iI])));
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveRowFormList" Id="{c7b91807-0b82-0e52-2df4-6abf6578c8bd}" FolderPath="ITF_BaseLoggerElement_HMI\">
      <Declaration><![CDATA[METHOD PRIVATE RemoveRowFormList : BOOL
VAR_INPUT
	refstFilter				: REFERENCE TO ST_BaseHMIConnectorEvents_Filter;
	uiIDEvent				: UINT;
	uiIDItem				: UINT;
	bActive					: BOOL;
	stItemInformation		: ST_BaseLogger_ItemDataToDisplay;
END_VAR
VAR
	bRemove					: BOOL;
	iK						: INT;
	bRemoveHelp				: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bRemove		:= FALSE;
bRemove		:= bRemove OR (refstFilter.bActive AND NOT bActive);
bRemove		:= bRemove OR (refstFilter.bNotActive AND bActive);
bRemove		:= bRemove OR (refstFilter.bIDItem	AND uiIDItem <> refstFilter.uiIDItem);
bRemove		:= bRemove OR (refstFilter.bIDEvent AND 
uiIDEvent <> refstFilter.uiIDEvent);
FOR iK := 1 TO GVL_BaseConstans.NUMBER_OF_EVENT_CATEGORIES DO
	CASE iK OF 
		E_BaseEvents_Category.Error		: bRemoveHelp	:=  stItemInformation.eEventCategory = E_BaseEvents_Category.Error;
		E_BaseEvents_Category.Alarm		: bRemoveHelp	:=  stItemInformation.eEventCategory = E_BaseEvents_Category.Alarm;
		E_BaseEvents_Category.Safety	: bRemoveHelp	:=  stItemInformation.eEventCategory = E_BaseEvents_Category.Safety;
		E_BaseEvents_Category.Message	: bRemoveHelp	:=  stItemInformation.eEventCategory = E_BaseEvents_Category.Message;
	END_CASE
	bRemove		:= bRemove OR (refstFilter.arrSelectedEventCategory [iK] AND bRemoveHelp);
END_FOR
//przeddział czasowy

RemoveRowFormList	:= bRemove;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>