<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_ItemTest" Id="{67cd6caa-e017-4b34-bb8d-f0159d16d57a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ItemTest EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[T01_TestAddItems ();
T02_TestFirstCycle ();
T03_TestSetidEvent ();
T04_TestSetIditem ();
T05_TestSetCodeItem ();
T06_TestEventsAdd ();
T07_TestLinkData ();
T08_TestEventReport ();
T09_TestEventReport ();
T10_PreparetableEventsForTesting ();

T11_TestGenerateListEvent ();

T12_TestPower ();
T13_TestPowerForTopElement ();



T99_Test ();]]></ST>
    </Implementation>
    <Method Name="T01_TestAddItems" Id="{ffa5565e-1480-486c-8118-fd6635b9e30b}">
      <Declaration><![CDATA[METHOD PRIVATE T01_TestAddItems
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T01_TestAddItems')) THEN
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1.uiNumberOfComponents, 		Message := 'T01 - bledna ilosc elementow');
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1.uiNumberOfControlElement, 	Message := 'T02 - bledna ilosc elementow');

	AssertEquals_UINT (Expected := 2, Actual := GVL_Variable.fbPB1_ZL1.uiNumberOfComponents, 	Message := 'T03 - bledna ilosc elementow');
	AssertEquals_UINT (Expected := 2, Actual := GVL_Variable.fbPB1_ZL1.uiNumberOfControlElement,Message := 'T04 - bledna ilosc elementow');
	
	AssertEquals_UINT (Expected := 2, Actual := GVL_Variable.fbPB1_Wyk1.uiNumberOfComponents, 	Message := 'T05 - bledna ilosc elementow');
	AssertEquals_UINT (Expected := 2, Actual := GVL_Variable.fbPB1_Wyk2.uiNumberOfComponents, 	Message := 'T06 - bledna ilosc elementow');
	

	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T02_TestFirstCycle" Id="{eff700b2-b65f-406d-a00d-f480c059d093}">
      <Declaration><![CDATA[METHOD PRIVATE T02_TestFirstCycle
VAR_INPUT
END_VAR

VAR
	bResult: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T02_TestFirstCycle')) THEN
	GVL.stCommonData.itfTime				:= GVL.fbMyTime;
	GVL.stCommonData.itfLocaciotn			:= GVL.fbMyLocation;
	GVL.stCommonData.itfLogger				:= GVL.fbLogger;
	
	bResult 	:= GVL_Variable.fbPB1.LinkCommonData (stCommonData	:= GVL.stCommonData);
	
	AssertTrue (Condition := bResult, Message := 'T01a - bladny wynik przepisania');
	
	bResult 	:= GVL_Variable.fbPB1.FirstCycle ();
	AssertTrue (Condition := bResult, Message := 'T02a - bladny wynik pierwszego przejścia');
	
	bResult		:= GVL_Variable.fbPB1.LinkSS1 (fbSS1		:= GVL.fbSS1);
	AssertTrue (Condition := bResult, Message := 'T03a - bladny wynik linkowania');
	
	bResult		:= GVL_Variable.fbPB1.LinkSTO (fbSTO		:= GVL.fbSTO);
	AssertTrue (Condition := bResult, Message := 'T03b - bladny wynik linkowania');
	
	
	
	TcUnit.TEST_FINISHED ();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="T03_TestSetidEvent" Id="{9bdc2d0f-632e-4b95-9aba-3f7935f9d98b}">
      <Declaration><![CDATA[METHOD PRIVATE T03_TestSetidEvent
VAR_INPUT
END_VAR

VAR
	uiLastID: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T03_TestSetidEvent')) THEN
	uiLastID		:= GVL_Variable.fbPB1.SetEventsIDs (uiNewID	:= 1);
	
	AssertEquals_UINT (Expected := 109, Actual := uiLastID, Message := 'T01 - Bledna ilosc nadanych ID zgloszeniom');
	//58 przekazywany do następnego defacto jest zgłoszęń o jeden mniej
	
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T04_TestSetIditem" Id="{a33bae01-cbe9-4abe-b62e-d4ad4b94da31}">
      <Declaration><![CDATA[METHOD PRIVATE T04_TestSetIditem
VAR_INPUT
END_VAR

VAR
	uiResult: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T04_TestSetIditem')) THEN
	uiResult 	:= GVL_Variable.fbPB1.SetID (uiID := 1);
	AssertEquals_UINT (Expected := 19, Actual := uiResult, Message := 'T01 - bledny numer id');
	
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T05_TestSetCodeItem" Id="{044a7e9a-475a-4c86-bfa2-472cee579292}">
      <Declaration><![CDATA[METHOD PRIVATE T05_TestSetCodeItem
VAR_INPUT
END_VAR

VAR
	sResult: string;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T05_TestSetCodeItem')) THEN
	GVL_Variable.fbPB1.SetCode (sCode := '0.0.0.0.0', sAdd := '1');
//	AssertEquals_UINT (Expected := 19, Actual := uiResult, Message := 'T01 - bledny numer id');
	AssertEquals_STRING (Expected := '1.0.0.0.0', Actual := GVL_Variable.fbPB1.GetCode (), Message := 'T01 - Bledny kod PB');

	AssertEquals_STRING (Expected := '1.1.0.0.0', Actual := GVL_Variable.fbPB1_K1.GetCode (), Message := 'T01 - Bledny kod PB K1');
	AssertEquals_STRING (Expected := '1.2.0.0.0', Actual := GVL_Variable.fbPB1_K2.GetCode (), Message := 'T02 - Bledny kod PB K2');
	AssertEquals_STRING (Expected := '1.3.0.0.0', Actual := GVL_Variable.fbPB1_K3.GetCode (), Message := 'T03 - Bledny kod PB K3');
	
	AssertEquals_STRING (Expected := '1.4.0.0.0', Actual := GVL_Variable.fbPB1_Wyk1.GetCode (), 	Message := 'T04 - Bledny kod PB WYK1');
	AssertEquals_STRING (Expected := '1.4.1.0.0', Actual := GVL_Variable.fbPB1_Wyk1_K1.GetCode (), 	Message := 'T05 - Bledny kod PB WYK1 K1');
	AssertEquals_STRING (Expected := '1.4.2.0.0', Actual := GVL_Variable.fbPB1_Wyk1_K2.GetCode (), 	Message := 'T06 - Bledny kod PB WYK1 K2');
	
	AssertEquals_STRING (Expected := '1.5.0.0.0', Actual := GVL_Variable.fbPB1_Wyk2.GetCode (), 	Message := 'T07 - Bledny kod PB WYK1');
	AssertEquals_STRING (Expected := '1.5.1.0.0', Actual := GVL_Variable.fbPB1_Wyk2_K1.GetCode (), 	Message := 'T08 - Bledny kod PB WYK1 K1');
	AssertEquals_STRING (Expected := '1.5.2.0.0', Actual := GVL_Variable.fbPB1_Wyk2_K2.GetCode (), 	Message := 'T09 - Bledny kod PB WYK1 K2');
	
	AssertEquals_STRING (Expected := '1.6.0.0.0', Actual := GVL_Variable.fbPB1_ZL1.GetCode (), 		Message := 'T10 - Bledny kod PB ZL1');
	AssertEquals_STRING (Expected := '1.6.1.0.0', Actual := GVL_Variable.fbPB1_ZL1_K1.GetCode (), 	Message := 'T11 - Bledny kod PB ZL1 K1');
	AssertEquals_STRING (Expected := '1.6.2.0.0', Actual := GVL_Variable.fbPB1_ZL1_K2.GetCode (), 	Message := 'T12 - Bledny kod PB ZL1 K2');
	
	AssertEquals_STRING (Expected := '1.6.3.0.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk1.GetCode (), 	Message := 'T13 - Bledny kod PB ZL1 WYK1');
	AssertEquals_STRING (Expected := '1.6.3.1.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk1_K1.GetCode (), 	Message := 'T14 - Bledny kod PB ZL1 WYK1 K1');
	AssertEquals_STRING (Expected := '1.6.3.2.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk1_K2.GetCode (), 	Message := 'T15 - Bledny kod PB ZL1 WYK1 K2');
	
	AssertEquals_STRING (Expected := '1.6.4.0.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk2.GetCode (), 	Message := 'T16 - Bledny kod PB ZL2 WYK1');
	AssertEquals_STRING (Expected := '1.6.4.1.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk2_K1.GetCode (), 	Message := 'T17 - Bledny kod PB ZL2 WYK1 K1');
	AssertEquals_STRING (Expected := '1.6.4.2.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk2_K2.GetCode (), 	Message := 'T18 - Bledny kod PB ZL2 WYK1 K2');
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T06_TestEventsAdd" Id="{6c65f74b-5234-4258-a261-2ba1552d9089}">
      <Declaration><![CDATA[METHOD PRIVATE T06_TestEventsAdd
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T06_TestEventsAdd')) THEN
	AssertEquals_UINT (Expected := 5, Actual := GVL_Variable.fbPB1.stEvents.uiNumberOfAdded, 	Message := 'T01 - bledna ilosc');
	
	AssertEquals_UINT (Expected := 6, Actual := GVL_Variable.fbPB1_K1.stEvents.uiNumberOfAdded, Message := 'T02 - bledna ilosc');
	AssertEquals_UINT (Expected := 6, Actual := GVL_Variable.fbPB1_K2.stEvents.uiNumberOfAdded, Message := 'T03 - bledna ilosc');
	AssertEquals_UINT (Expected := 6, Actual := GVL_Variable.fbPB1_K3.stEvents.uiNumberOfAdded, Message := 'T04 - bledna ilosc');
 	
	AssertEquals_UINT (Expected := 5, Actual := GVL_Variable.fbPB1_Wyk1.stEvents.uiNumberOfAdded, Message := 'T05 - bledna ilosc');
	AssertEquals_UINT (Expected := 5, Actual := GVL_Variable.fbPB1_Wyk2.stEvents.uiNumberOfAdded, Message := 'T06 - bledna ilosc');
	
	AssertEquals_UINT (Expected := 5, Actual := GVL_Variable.fbPB1_ZL1.stEvents.uiNumberOfAdded, Message := 'T07 - bledna ilosc');
	
	TcUnit.TEST_FINISHED ();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="T07_TestLinkData" Id="{1b5302c2-980b-44f9-a646-403ed298179b}">
      <Declaration><![CDATA[METHOD PRIVATE T07_TestLinkData
VAR_INPUT
END_VAR

VAR
	bResult: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T07_TestLinkData')) THEN
	bResult 	:= GVL_VariableHMI.fbPB1_HMI.LinkCommonData (stCommonData	:= GVL.stCommonData);
	AssertTrue (Condition := bResult, Message := 'T01a - bladny wynik przepisania');
	
	GVL_VariableHMI.fbPB1_HMI.LinkTopElementData (stData := gvl.stTopElementData);
	
	AssertTrue (Condition := GVL_VariableHMI.fbPB1_HMI.IsValidCommonData (), Message := 'T02 - bledna flaga podlaczenia danych wspólnych');
	
	bResult		:= GVL_Variable.fbPB1.JoinTheLogger ();
	AssertTrue (Condition := bResult, Message := 'T03 - bladny wynik przepisania');
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T08_TestEventReport" Id="{0c904616-32b9-46fe-b921-f2cb2c1a5e9e}">
      <Declaration><![CDATA[METHOD PRIVATE T08_TestEventReport
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T08_TestEventReport')) THEN
(*	Wyczyszenie pamięci i sprawdzenie czy rzeczywiście nic tam nie ma *)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL.fbLogger.bClearMemory), Value := TRUE);
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 	Message := 'T01a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stmemory.iNumberOfRow,		Message := 'T01b - bledna ilosc zgloszen');
(*	Wyslanie zgloszen	*)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bSetAlarm), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T02a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T02b - bledna ilosc zgloszen');
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T03a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T03b - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stNumberOfReports.iNumberOfActive,			Message := 'T03c - bledna ilosc zgloszen');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Error],	Message := 'T03d - bledny stan');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Alarm],	Message := 'T03e - bledny stan');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.bIsActive,									Message := 'T03f - bledny stan');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stNumberOfReports.iTotalNumer,				Message := 'T03g - bledna ilosc zgloszen');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDItem,				Message := 'T03h - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDEvent,				Message := 'T03i - bledne ID zgloszenia');
(*	Wyslanie zgloszen zamnięcie *)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bResetAlarm), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T04a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T04b - bledna ilosc zgloszen');
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T05a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T05b - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stNumberOfReports.iNumberOfActive,			Message := 'T05c - bledna ilosc zgloszen');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Error],	Message := 'T05d - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Alarm],	Message := 'T05e - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.bIsActive,									Message := 'T05f - bledny stan');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stNumberOfReports.iTotalNumer,				Message := 'T05g - bledna ilosc zgloszen');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDItem,				Message := 'T05h - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDEvent,				Message := 'T05i - bledne ID zgloszenia');
(*	Wyslanie zgloszen	*)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bSetAlarm), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T06a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T06b - bledna ilosc zgloszen');
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T07a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 2, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T07b - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stNumberOfReports.iNumberOfActive,			Message := 'T07c - bledna ilosc zgloszen');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Error],	Message := 'T07d - bledny stan');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Alarm],	Message := 'T07e - bledny stan');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.bIsActive,									Message := 'T07f - bledny stan');
	AssertEquals_INT (Expected := 2, Actual := GVL.fbLogger.stNumberOfReports.iTotalNumer,				Message := 'T07g - bledna ilosc zgloszen');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDItem,				Message := 'T07h - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDEvent,				Message := 'T07i - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDItem,				Message := 'T07j - 3 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDEvent,				Message := 'T07k - 4 - bledne ID zgloszenia');
(*	proba wysłania potwierrdzenia do zdarzenia bez potwierdzenia nic sie nie powinno wyfarzyć 	*)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bAckAlarm), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T08a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 2, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T08b - bledna ilosc zgloszen');
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T09a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 2, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T09b - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stNumberOfReports.iNumberOfActive,			Message := 'T09c - bledna ilosc zgloszen');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Error],	Message := 'T09d - bledny stan');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Alarm],	Message := 'T09e - bledny stan');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.bIsActive,									Message := 'T09f - bledny stan');
	AssertEquals_INT (Expected := 2, Actual := GVL.fbLogger.stNumberOfReports.iTotalNumer,				Message := 'T09g - bledna ilosc zgloszen');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDItem,				Message := 'T09h - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDEvent,				Message := 'T09i - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDItem,				Message := 'T09j - 3 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDEvent,				Message := 'T09k - 4 - bledne ID zgloszenia');
	AssertFalse (Condition := gvl.fbLogger.stMemory.arrRow [1].bConfirm,								Message := 'T09l - bledny stan');
	AssertFalse (Condition := gvl.fbLogger.stMemory.arrRow [1].bConfirmed,								Message := 'T09m - bledny stan');
(*	Wyslanie zgloszen zamnięcie *)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bResetAlarm), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T10a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 2, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T10b - bledna ilosc zgloszen');
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T11a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 2, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T11b - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stNumberOfReports.iNumberOfActive,			Message := 'T11c - bledna ilosc zgloszen');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Error],	Message := 'T11d - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Alarm],	Message := 'T11e - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.bIsActive,									Message := 'T11f - bledny stan');
	AssertEquals_INT (Expected := 2, Actual := GVL.fbLogger.stNumberOfReports.iTotalNumer,				Message := 'T11g - bledna ilosc zgloszen');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDItem,				Message := 'T11h - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDEvent,				Message := 'T11i - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDItem,				Message := 'T11j - 3 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDEvent,				Message := 'T11k - 4 - bledne ID zgloszenia');
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T09_TestEventReport" Id="{8709cc52-d2ae-4189-8de2-3e05c323545d}">
      <Declaration><![CDATA[METHOD PRIVATE T09_TestEventReport
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T09_TestEventReport')) THEN
(*	Wyslanie zgloszen	*)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bSetError2), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T01a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 2, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T01b - bledna ilosc zgloszen');
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T02a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T02b - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stNumberOfReports.iNumberOfActive,			Message := 'T02c - bledna ilosc zgloszen');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Error],	Message := 'T02d - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Alarm],	Message := 'T02e - bledny stan');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.bIsActive,									Message := 'T02f - bledny stan');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stNumberOfReports.iTotalNumer,				Message := 'T02g - bledna ilosc zgloszen');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDItem,				Message := 'T02h - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 8, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDEvent,				Message := 'T02i - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDItem,				Message := 'T02j - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDEvent,				Message := 'T02k - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [3].uiIDItem,				Message := 'T02l - 3 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [3].uiIDEvent,				Message := 'T02m - 4 - bledne ID zgloszenia');
(*	Wyslanie zgloszen zamnięcie bez potwierdzenia nic sie nie powinno stac*)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bResetError2), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T03a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T03b - bledna ilosc zgloszen');
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T04a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T04b - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stNumberOfReports.iNumberOfActive,			Message := 'T04c - bledna ilosc zgloszen');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Error],	Message := 'T04d - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Alarm],	Message := 'T04e - bledny stan');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.bIsActive,									Message := 'T04f - bledny stan');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stNumberOfReports.iTotalNumer,				Message := 'T04g - bledna ilosc zgloszen');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDItem,				Message := 'T04h - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 8, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDEvent,				Message := 'T04i - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDItem,				Message := 'T04j - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDEvent,				Message := 'T04k - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [3].uiIDItem,				Message := 'T04l - 3 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [3].uiIDEvent,				Message := 'T04m - 4 - bledne ID zgloszenia');
(*	wysłanie potwierdzenia 	*)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bAckError2), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T05a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T05b - bledna ilosc zgloszen');
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T06a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T06b - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stNumberOfReports.iNumberOfActive,			Message := 'T06c - bledna ilosc zgloszen');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Error],	Message := 'T06d - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Alarm],	Message := 'T06e - bledny stan');
	AssertTrue (Condition := GVL.fbLogger.stNumberOfReports.bIsActive,									Message := 'T06f - bledny stan');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stNumberOfReports.iTotalNumer,				Message := 'T06g - bledna ilosc zgloszen');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDItem,				Message := 'T06h - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 8, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDEvent,				Message := 'T06i - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDItem,				Message := 'T06j - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDEvent,				Message := 'T06k - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [3].uiIDItem,				Message := 'T06l - 3 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [3].uiIDEvent,				Message := 'T06m - 4 - bledne ID zgloszenia');
(*	Wyslanie zgloszen zamnięcie *)
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bReseterror2), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	AssertEquals_INT (Expected := 1, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T07a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T07b - bledna ilosc zgloszen');
	GVL.fbLogger ();
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stBuffer.iNumerOfEvents, 					Message := 'T08a - bledna ilosc w kolejce');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stmemory.iNumberOfRow,						Message := 'T08b - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.stNumberOfReports.iNumberOfActive,			Message := 'T08c - bledna ilosc zgloszen');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Error],	Message := 'T08d - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.arrActive [E_BaseEvents_Category.Alarm],	Message := 'T08e - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.stNumberOfReports.bIsActive,									Message := 'T08f - bledny stan');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.stNumberOfReports.iTotalNumer,				Message := 'T08g - bledna ilosc zgloszen');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDItem,				Message := 'T08h - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 8, Actual := GVL.fbLogger.stMemory.arrRow [1].uiIDEvent,				Message := 'T08i - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDItem,				Message := 'T08j - 1 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [2].uiIDEvent,				Message := 'T08k - 2 - bledne ID zgloszenia');
	AssertEquals_UINT (Expected := 2, Actual := GVL.fbLogger.stMemory.arrRow [3].uiIDItem,				Message := 'T08l - 3 - bledne ID elementu');
	AssertEquals_UINT (Expected := 6, Actual := GVL.fbLogger.stMemory.arrRow [3].uiIDEvent,				Message := 'T08m - 4 - bledne ID zgloszenia');
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T10_PreparetableEventsForTesting" Id="{7c0656b1-07ea-4416-8b8a-5f38100adef3}">
      <Declaration><![CDATA[METHOD PRIVATE T10_PreparetableEventsForTesting
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T10_PreparetableEventsForTesting')) THEN
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_Wyk1_K1.bSetAlarm2), Value := TRUE);
	GVL_Variable.fbPB1_Wyk1_K1 ();
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bSetAlarm2), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_ZL1_Wyk1_K1.bSetError2), Value := TRUE);
	GVL_Variable.fbPB1_ZL1_Wyk1_K1 ();
	GVL.fbLogger ();
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bSetError2), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bSetError4), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_Wyk2_K1.bSetAlarm), Value := TRUE);
	GVL_Variable.fbPB1_Wyk2_K1 ();
	GVL.fbLogger ();
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bResetAlarm2), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_Wyk1_K1.bResetAlarm2), Value := TRUE);
	GVL_Variable.fbPB1_Wyk1_K1 ();
	WRITE_PROTECTED_BOOL (Ptr := ADR (GVL_Variable.fbPB1_K1.bSetError1), Value := TRUE);
	GVL_Variable.fbPB1_K1 ();
	GVL.fbLogger ();
	TcUnit.TEST_FINISHED ();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="T11_TestGenerateListEvent" Id="{241b2ddc-41df-4506-9318-83efcc8ca76c}">
      <Declaration><![CDATA[METHOD PRIVATE T11_TestGenerateListEvent
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T11_TestGenerateListEvent')) THEN
	GVL_VariableHMI.fbPB1_K1_HMI.GetYourEventTable ();
	AssertEquals_INT (Expected := 7, Actual := GVL.fbLogger.arrNumberOfReportsForItem [2].iTotalNumer, Message := 'T01 - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.arrNumberOfReportsForItem [2].iNumberOfActive, Message := 'T02 - bledna ilosc zgloszen aktywnych');
	AssertTrue (Condition := GVL.fbLogger.arrNumberOfReportsForItem [2].bIsActive, Message := 'T03 - bledny stan aktywnosci');
	AssertTrue (Condition := GVL.fbLogger.arrNumberOfReportsForItem [2].bIsActiveWithConfirmation, Message := 'T04 - bledny stan do potwierdzenia');
	
	AssertEquals_INT (Expected := 3, Actual := GVL.fbLogger.arrNumberOfReportsForItem [2].arrNumberOfActive [1], Message := 'T05 - bledna ilosc zgloszen');
	AssertEquals_INT (Expected := 0, Actual := GVL.fbLogger.arrNumberOfReportsForItem [2].arrNumberOfActive [2], Message := 'T06 - bledna ilosc zgloszen');
	AssertTrue (Condition := GVL.fbLogger.arrNumberOfReportsForItem [2].arrActive [1], Message := 'T07 - bledny stan');
	AssertFalse (Condition := GVL.fbLogger.arrNumberOfReportsForItem [2].arrActive [2], Message := 'T08 - bledny stan');
	
	AssertEquals_INT (Expected := 7, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.iNumberOfRow , Message := 'T10 - bledna ilosc do wyswietlenia');
	AssertEquals_UINT (Expected := 7, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [1].uiIDEvent , Message := 'T10 - [01] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 11, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [2].uiIDEvent , Message := 'T10 - [02] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 8, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [3].uiIDEvent , Message := 'T10 - [03] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 9, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [4].uiIDEvent , Message := 'T10 - [04] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 8, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [5].uiIDEvent , Message := 'T10 - [05] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 6, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [6].uiIDEvent , Message := 'T10 - [06] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 6, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [7].uiIDEvent , Message := 'T10 - [07] - Bledny ID zdarzenia');
	
//tylko aktywne	
	GVL.stTopElementData.stComponent1.stBaseLoggerElement.stFilter.bActive	:= TRUE;
	GVL_VariableHMI.fbPB1_K1_HMI.GetYourEventTable ();
	AssertEquals_INT (Expected := 3, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.iNumberOfRow , Message := 'T11 - bledna ilosc do wyswietlenia');
	AssertEquals_UINT (Expected := 7, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [1].uiIDEvent , Message := 'T11 - [01] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 11, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [2].uiIDEvent , Message := 'T11 - [02] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 8, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [3].uiIDEvent , Message := 'T11 - [03] - Bledny ID zdarzenia');
	
//tylko nie aktywne	
	GVL.stTopElementData.stComponent1.stBaseLoggerElement.stFilter.bActive	:= FALSE;
	GVL.stTopElementData.stComponent1.stBaseLoggerElement.stFilter.bNotActive	:= TRUE;	
	GVL_VariableHMI.fbPB1_K1_HMI.GetYourEventTable ();
	AssertEquals_INT (Expected := 4, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.iNumberOfRow , Message := 'T12 - bledna ilosc do wyswietlenia');
	AssertEquals_UINT (Expected := 9, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [1].uiIDEvent , Message := 'T12 - [01] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 8, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [2].uiIDEvent , Message := 'T12 - [02] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 6, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [3].uiIDEvent , Message := 'T12 - [03] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 6, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [4].uiIDEvent , Message := 'T12 - [04] - Bledny ID zdarzenia');

	GVL.stTopElementData.stComponent1.stBaseLoggerElement.stFilter.bNotActive	:= FALSE;	
	GVL_VariableHMI.fbPB1_K1_HMI.GetYourEventTable ();
	AssertEquals_INT (Expected := 7, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.iNumberOfRow , Message := 'T13 - bledna ilosc do wyswietlenia');
	AssertEquals_UINT (Expected := 7, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [1].uiIDEvent , Message := 'T13 - [01] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 11, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [2].uiIDEvent , Message := 'T13 - [02] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 8, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [3].uiIDEvent , Message := 'T13 - [03] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 9, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [4].uiIDEvent , Message := 'T13 - [04] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 8, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [5].uiIDEvent , Message := 'T13 - [05] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 6, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [6].uiIDEvent , Message := 'T13 - [06] - Bledny ID zdarzenia');
	AssertEquals_UINT (Expected := 6, Actual := GVL_VariableHMI.fbPB1_K1_HMI.refstBaseLoggerElementDataHMI.stListOfEventsToDisplay.arrToDisplay [7].uiIDEvent , Message := 'T13 - [07] - Bledny ID zdarzenia');

	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T12_TestPower" Id="{e4e4c6b0-0f4a-4549-a00c-9441c17fe9b7}">
      <Declaration><![CDATA[METHOD PROTECTED T12_TestPower
VAR_INST
	iStep				: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T12_TestPower')) THEN
	CASE iStep OF
	0	:
		AssertFalse (Condition := GVL.fbSS1.GetFlag (), Message := 'S00 - T01 - Bledny stan');
		AssertFalse (Condition := GVL.fbSTO.GetFlag (), Message := 'S00 - T02 - Bledny stan');
		GVL_Variable.fbPB1_Wyk1.PowerTurnOn ();
		iStep		:= iStep + 10;
	10	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stEvents.arrState [1], 				Message := 'S10 - T01 - bledny stan bledu SS1');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stEvents.arrState [2], 				Message := 'S10 - T02 - bledny stan bledu STO');
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.stPower.cmdTurnOn.GetBusy (), 			Message := 'S10 - T03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.stPower.cmdTurnOn.GetFirstCycle (), 	Message := 'S10 - T05 - bledny pierwszy cykl');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stPower.cmdTurnOn.GetLastCycle (), 	Message := 'S10 - T06 - bledny ostatni cykl');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.PowerGetStatus (), 					Message := 'S10 - T04 - bledny status');
		
		iStep		:= iStep + 10;
	20	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.stEvents.arrState [1], 				Message := 'T20 - 01 - bledny stan bledu SS1');
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.stEvents.arrState [2], 				Message := 'T20 - 02 - bledny stan bledu STO');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stPower.cmdTurnOn.GetBusy (),		 	Message := 'T20 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stPower.cmdTurnOn.GetFirstCycle (),	Message := 'T20 - 05 - bledny pierwszy cykl');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stpower.cmdTurnOn.GetLastCycle (), 	Message := 'T20 - 06 - bledny ostatni cykl');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.PowerGetStatus (), 					Message := 'T20 - 04 - bledny status');
		GVL.fbSS1.SetFlag (bState := TRUE);
		GVL.fbSTO.SetFlag (bState := TRUE);
		iStep			:= iStep + 10;
	30	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		iStep			:= iStep + 10;
	40	:
		GVL_Variable.fbPB1_Wyk1.PowerTurnOn ();
		iStep			:= iStep + 10;
	50	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.stEvents.arrState [1], 						Message := 'T50 - 01 - bledny stan bledu SS1');
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.stEvents.arrState [2],				 			Message := 'T50 - 02 - bledny stan bledu STO');
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.stPower.cmdTurnOn.GetBusy (),				 	Message := 'T50 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.PowerGetStatus (),			 				Message := 'T50 - 04 - bledny status');
		iStep			:= iStep + 10;
	60	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stEvents.arrState [1], 						Message := 'T60 - 01 - bledny stan bledu SS1');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stEvents.arrState [2], 						Message := 'T60 - 02 - bledny stan bledu STO');
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.stPower.cmdTurnOn.GetBusy (),				 	Message := 'T60 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.powerGetStatus (), 							Message := 'T60 - 04 - bledny status');
		iStep			:= iStep + 10;
	70	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stpower.cmdTurnOn.GetBusy (), 				Message := 'T70 - 01 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.PowergetStatus(),			 					Message := 'T70 - 02 - bledny status');
		iStep			:= iStep + 10;
	80	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		iStep			:= iStep + 10;
	90	:
		GVL_Variable.fbPB1_Wyk1.PowerTurnOff ();
		iStep			:= iStep + 10;
	100	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T100 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1_Wyk1.PowerGetStatus (), 				Message := 'T100 - 04 - bledny status');
		iStep			:= iStep + 10;
	110	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		AssertTrue (Condition := GVL_variable.fbPB1_Wyk1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T110 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.PowerGetStatus (), 					Message := 'T110 - 04 - bledny status');
		iStep			:= iStep + 10;
	120	:
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Test ();
		GVL_Variable.fbPB1_Wyk1.ExecuteEveryCycle_Operation ();
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T120 - 01 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1_Wyk1.PowerGetStatus (), 					Message := 'T120 - 02 - bledny status');
		


		iStep		:= 1000;
	1000	:
		TcUnit.TEST_FINISHED ();
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T13_TestPowerForTopElement" Id="{b9291c1e-223d-4d56-b9cb-779baf974e98}">
      <Declaration><![CDATA[METHOD PRIVATE T13_TestPowerForTopElement
VAR_INST
	iStep: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T13_TestPowerForTopElement')) THEN
	GVL_Variable.fbPB1.ExecuteEveryCycle_Test ();
	GVL_Variable.fbPB1.ExecuteEveryCycle_Operation ();
	GVL_Variable.fbPB1.ExecuteEveryCycle_Status ();
	 CASE iStep	OF
	0	:
		GVL.fbSS1.SetFlag (bState	:= FALSE);
		GVL.fbSTO.SetFlag (bState	:= FALSE);
		AssertFalse		(Condition := GVL.fbSS1.GetFlag (), Message := 'K0 - T01 - bledny stan SS1');
		AssertFalse		(Condition := GVL.fbSTO.GetFlag (), Message := 'K0 - T02 - bledny stan SSO');
		GVL_Variable.fbPB1.PowerTurnOn ();
		iStep			:= iStep + 10;
	10	:
		AssertFalse (Condition := GVL_Variable.fbPB1.stEvents.arrState [1], 				Message := 'T10 - 01 - bledny stan bledu SS1');
		AssertFalse (Condition := GVL_Variable.fbPB1.stEvents.arrState [2], 				Message := 'T10 - 02 - bledny stan bledu STO');
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 			Message := 'T10 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetFirstCycle (), 	Message := 'T10 - 05 - bledny pierwszy cykl');
		AssertFalse (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetLastCycle (), 	Message := 'T10 - 06 - bledny ostatni cykl');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T10 - 04 - bledny status');
		iStep			:= iStep + 10;
	20	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stEvents.arrState [1], 					Message := 'T20 - 01 - bledny stan bledu SS1');
		AssertTrue (Condition := GVL_Variable.fbPB1.stEvents.arrState [2], 					Message := 'T20 - 02 - bledny stan bledu STO');
		AssertFalse (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 			Message := 'T20 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetFirstCycle (),	Message := 'T20 - 05 - bledny pierwszy cykl');
		AssertFalse (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetLastCycle (),	 	Message := 'T20 - 06 - bledny ostatni cykl');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T20 - 04 - bledny status');
		GVL.fbSS1.SetFlag (bState	:= TRUE);
		GVL.fbSTO.SetFlag (bState	:= TRUE);
		iStep			:= iStep + 10;
	30	:
		iStep			:= iStep + 10;
	40	:
		GVL_Variable.fbPB1.PowerTurnOn ();
		iStep 			:= iStep + 10;
	50	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stEvents.arrState [1], 				Message := 'T50 - 01 - bledny stan bledu SS1');
		AssertTrue (Condition := GVL_Variable.fbPB1.stEvents.arrState [2], 				Message := 'T50 - 02 - bledny stan bledu STO');
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 		Message := 'T50 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T50 - 04 - bledny status');
		iStep			:= iStep + 10;
	60	:
		AssertFalse (Condition := GVL_Variable.fbPB1.stEvents.arrState [1], 			Message := 'T60 - 01 - bledny stan bledu SS1');
		AssertFalse (Condition := GVL_Variable.fbPB1.stEvents.arrState [2], 			Message := 'T60 - 02 - bledny stan bledu STO');
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 		Message := 'T60 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T60 - 04 - bledny status');
		iStep			:= iStep + 10;
	70	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 		Message := 'T70 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T70 - 04 - bledny status');
		iStep			:= iStep + 10;
	80	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 		Message := 'T80 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T80 - 04 - bledny status');
		iStep			:= iStep + 10;
	90	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 		Message := 'T90 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T90 - 04 - bledny status');
		iStep			:= iStep + 10;
	100	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 		Message := 'T100 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T100 - 04 - bledny status');
		iStep			:= iStep + 10;
	110	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 		Message := 'T110 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T110 - 04 - bledny status');
		iStep			:= iStep + 10;
	120	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 		Message := 'T120 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T120 - 04 - bledny status');
		iStep			:= iStep + 10;
	130	:
		AssertFalse (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOn.GetBusy (), 	Message := 'T130 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T130 - 04 - bledny status');
		iStep			:= iStep + 10;
	140	:
		iStep			:= iStep + 10;
	150	:
		GVL_Variable.fbPB1.PowerTurnOff ();
		iStep			:= iStep + 10;
	160	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T160 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T160 - 04 - bledny status');
		iStep			:= iStep + 10;
	170	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T170 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T170 - 04 - bledny status');
		iStep			:= iStep + 10;
	180	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T180 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T180 - 04 - bledny status');
		iStep			:= iStep + 10;
	190	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T190 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T190 - 04 - bledny status');
		iStep			:= iStep + 10;
	200	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T200 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T200 - 04 - bledny status');
		iStep			:= iStep + 10;
	210	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T210 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T210 - 04 - bledny status');
		iStep			:= iStep + 10;
	220	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T220 - 03 - bledny stan trwa');
		AssertTrue (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T220 - 04 - bledny status');
		iStep			:= iStep + 10;
	230	:
		AssertTrue (Condition := GVL_Variable.fbPB1.stPower.cmdTurnOff.GetBusy (), 	Message := 'T230 - 03 - bledny stan trwa');
		AssertFalse (Condition := GVL_Variable.fbPB1.PowerGetStatus (), 					Message := 'T230 - 04 - bledny status');
		iStep		:= 1000;
	1000	:
		TcUnit.TEST_FINISHED ();
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T99_Test" Id="{3bffd01d-c8de-4919-b8d1-c032dde1e9c1}">
      <Declaration><![CDATA[METHOD INTERNAL T99_Test
VAR_INST
	bFinish	: BOOL;
	bT99Test: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T99_Test')) THEN
	bT99Test			:= TRUE;

	GVL_Variable.fbPB1.ExecuteEveryCycle_Test ();
	GVL_Variable.fbPB1.ExecuteEveryCycle_Operation ();
	GVL_Variable.fbPB1.ExecuteEveryCycle_Status ();
	GVL_Variable.fbPB1.ExecuteEveryCycle_Error ();
	
	IF bFinish THEN
		bT99Test		:= FALSE;
		TcUnit.TEST_FINISHED ();
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>