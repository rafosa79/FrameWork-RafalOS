<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_ItemTest" Id="{67cd6caa-e017-4b34-bb8d-f0159d16d57a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ItemTest EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[T01_TestAddItems ();
T02_TestFirstCycle ();
T03_TestSetidEvent ();
T04_TestSetIditem ();
T05_TestSetCodeItem ();
T06_TestEventsAdd ();
T07_TestLinkData ();
T08_TestGenerateListEvent ();
]]></ST>
    </Implementation>
    <Method Name="T01_TestAddItems" Id="{ffa5565e-1480-486c-8118-fd6635b9e30b}">
      <Declaration><![CDATA[METHOD PRIVATE T01_TestAddItems
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T01_TestAddItems')) THEN
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1.uiNumberOfComponents, 		Message := 'T01 - bledna ilosc elementow');
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1.uiNumberOfControlElement, 	Message := 'T02 - bledna ilosc elementow');

	AssertEquals_UINT (Expected := 2, Actual := GVL_Variable.fbPB1_ZL1.uiNumberOfComponents, 	Message := 'T03 - bledna ilosc elementow');
	AssertEquals_UINT (Expected := 2, Actual := GVL_Variable.fbPB1_ZL1.uiNumberOfControlElement,Message := 'T04 - bledna ilosc elementow');
	
	AssertEquals_UINT (Expected := 2, Actual := GVL_Variable.fbPB1_Wyk1.uiNumberOfComponents, 	Message := 'T05 - bledna ilosc elementow');
	AssertEquals_UINT (Expected := 2, Actual := GVL_Variable.fbPB1_Wyk2.uiNumberOfComponents, 	Message := 'T06 - bledna ilosc elementow');
	

	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T02_TestFirstCycle" Id="{eff700b2-b65f-406d-a00d-f480c059d093}">
      <Declaration><![CDATA[METHOD PRIVATE T02_TestFirstCycle
VAR_INPUT
END_VAR

VAR
	bResult: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T02_TestFirstCycle')) THEN
	GVL.stCommonData.itfTime				:= GVL.fbMyTime;
	GVL.stCommonData.itfLocaciotn			:= GVL.fbMyLocation;
	GVL.stCommonData.itfLogger				:= GVL.fbLogger;
	
	bResult 	:= GVL_Variable.fbPB1.LinkCommonData (stCommonData	:= GVL.stCommonData);
	
	AssertTrue (Condition := bResult, Message := 'T01a - bladny wynik przepisania');
	
	bResult 	:= GVL_Variable.fbPB1.FirstCycle ();
	AssertTrue (Condition := bResult, Message := 'T02a - bladny wynik pierwszego przejścia');
	
	TcUnit.TEST_FINISHED ();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="T03_TestSetidEvent" Id="{9bdc2d0f-632e-4b95-9aba-3f7935f9d98b}">
      <Declaration><![CDATA[METHOD PRIVATE T03_TestSetidEvent
VAR_INPUT
END_VAR

VAR
	uiLastID: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T03_TestSetidEvent')) THEN
	uiLastID		:= GVL_Variable.fbPB1.SetEventsIDs (uiNewID	:= 1);
	
	AssertEquals_UINT (Expected := 58, Actual := uiLastID, Message := 'T01 - Bledna ilosc nadanych ID zgloszeniom');
	//58 przekazywany do następnego defacto jest zgłoszęń o jeden mniej
	
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T04_TestSetIditem" Id="{a33bae01-cbe9-4abe-b62e-d4ad4b94da31}">
      <Declaration><![CDATA[METHOD PRIVATE T04_TestSetIditem
VAR_INPUT
END_VAR

VAR
	uiResult: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T04_TestSetIditem')) THEN
	uiResult 	:= GVL_Variable.fbPB1.SetID (uiID := 1);
	AssertEquals_UINT (Expected := 19, Actual := uiResult, Message := 'T01 - bledny numer id');
	
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T05_TestSetCodeItem" Id="{044a7e9a-475a-4c86-bfa2-472cee579292}">
      <Declaration><![CDATA[METHOD PRIVATE T05_TestSetCodeItem
VAR_INPUT
END_VAR

VAR
	sResult: string;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T05_TestSetCodeItem')) THEN
	GVL_Variable.fbPB1.SetCode (sCode := '0.0.0.0.0', sAdd := '1');
//	AssertEquals_UINT (Expected := 19, Actual := uiResult, Message := 'T01 - bledny numer id');
	AssertEquals_STRING (Expected := '1.0.0.0.0', Actual := GVL_Variable.fbPB1.GetCode (), Message := 'T01 - Bledny kod PB');

	AssertEquals_STRING (Expected := '1.1.0.0.0', Actual := GVL_Variable.fbPB1_K1.GetCode (), Message := 'T01 - Bledny kod PB K1');
	AssertEquals_STRING (Expected := '1.2.0.0.0', Actual := GVL_Variable.fbPB1_K2.GetCode (), Message := 'T02 - Bledny kod PB K2');
	AssertEquals_STRING (Expected := '1.3.0.0.0', Actual := GVL_Variable.fbPB1_K3.GetCode (), Message := 'T03 - Bledny kod PB K3');
	
	AssertEquals_STRING (Expected := '1.4.0.0.0', Actual := GVL_Variable.fbPB1_Wyk1.GetCode (), 	Message := 'T04 - Bledny kod PB WYK1');
	AssertEquals_STRING (Expected := '1.4.1.0.0', Actual := GVL_Variable.fbPB1_Wyk1_K1.GetCode (), 	Message := 'T05 - Bledny kod PB WYK1 K1');
	AssertEquals_STRING (Expected := '1.4.2.0.0', Actual := GVL_Variable.fbPB1_Wyk1_K2.GetCode (), 	Message := 'T06 - Bledny kod PB WYK1 K2');
	
	AssertEquals_STRING (Expected := '1.5.0.0.0', Actual := GVL_Variable.fbPB1_Wyk2.GetCode (), 	Message := 'T07 - Bledny kod PB WYK1');
	AssertEquals_STRING (Expected := '1.5.1.0.0', Actual := GVL_Variable.fbPB1_Wyk2_K1.GetCode (), 	Message := 'T08 - Bledny kod PB WYK1 K1');
	AssertEquals_STRING (Expected := '1.5.2.0.0', Actual := GVL_Variable.fbPB1_Wyk2_K2.GetCode (), 	Message := 'T09 - Bledny kod PB WYK1 K2');
	
	AssertEquals_STRING (Expected := '1.6.0.0.0', Actual := GVL_Variable.fbPB1_ZL1.GetCode (), 		Message := 'T10 - Bledny kod PB ZL1');
	AssertEquals_STRING (Expected := '1.6.1.0.0', Actual := GVL_Variable.fbPB1_ZL1_K1.GetCode (), 	Message := 'T11 - Bledny kod PB ZL1 K1');
	AssertEquals_STRING (Expected := '1.6.2.0.0', Actual := GVL_Variable.fbPB1_ZL1_K2.GetCode (), 	Message := 'T12 - Bledny kod PB ZL1 K2');
	
	AssertEquals_STRING (Expected := '1.6.3.0.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk1.GetCode (), 	Message := 'T13 - Bledny kod PB ZL1 WYK1');
	AssertEquals_STRING (Expected := '1.6.3.1.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk1_K1.GetCode (), 	Message := 'T14 - Bledny kod PB ZL1 WYK1 K1');
	AssertEquals_STRING (Expected := '1.6.3.2.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk1_K2.GetCode (), 	Message := 'T15 - Bledny kod PB ZL1 WYK1 K2');
	
	AssertEquals_STRING (Expected := '1.6.4.0.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk2.GetCode (), 	Message := 'T16 - Bledny kod PB ZL2 WYK1');
	AssertEquals_STRING (Expected := '1.6.4.1.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk2_K1.GetCode (), 	Message := 'T17 - Bledny kod PB ZL2 WYK1 K1');
	AssertEquals_STRING (Expected := '1.6.4.2.0', Actual := GVL_Variable.fbPB1_ZL1_Wyk2_K2.GetCode (), 	Message := 'T18 - Bledny kod PB ZL2 WYK1 K2');
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T06_TestEventsAdd" Id="{6c65f74b-5234-4258-a261-2ba1552d9089}">
      <Declaration><![CDATA[METHOD PRIVATE T06_TestEventsAdd
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T02_TestEventsAdd')) THEN
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1.stEvents.uiNumberOfAdded, 	Message := 'T01 - bledna ilosc');
	
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1_K1.stEvents.uiNumberOfAdded, Message := 'T02 - bledna ilosc');
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1_K2.stEvents.uiNumberOfAdded, Message := 'T03 - bledna ilosc');
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1_K3.stEvents.uiNumberOfAdded, Message := 'T04 - bledna ilosc');
 	
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1_Wyk1.stEvents.uiNumberOfAdded, Message := 'T05 - bledna ilosc');
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1_Wyk2.stEvents.uiNumberOfAdded, Message := 'T07 - bledna ilosc');
	
	AssertEquals_UINT (Expected := 3, Actual := GVL_Variable.fbPB1_ZL1.stEvents.uiNumberOfAdded, Message := 'T07 - bledna ilosc');
	
	TcUnit.TEST_FINISHED ();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="T07_TestLinkData" Id="{1b5302c2-980b-44f9-a646-403ed298179b}">
      <Declaration><![CDATA[METHOD PRIVATE T07_TestLinkData
VAR_INPUT
END_VAR

VAR
	bResult: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T07_TestLinkData')) THEN
	bResult 	:= GVL_VariableHMI.fbPB1_HMI.LinkCommonData (stCommonData	:= GVL.stCommonData);
	AssertTrue (Condition := bResult, Message := 'T01a - bladny wynik przepisania');
	
	GVL_VariableHMI.fbPB1_HMI.LinkTopElementData (stData := gvl.stTopElementData);
	
	AssertTrue (Condition := GVL_VariableHMI.fbPB1_HMI.IsValidCommonData (), Message := 'T02 - bledna flaga podlaczenia danych wspólnych');
	
	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="T08_TestGenerateListEvent" Id="{241b2ddc-41df-4506-9318-83efcc8ca76c}">
      <Declaration><![CDATA[METHOD PRIVATE T08_TestGenerateListEvent
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (TcUnit.TEST_ORDERED ('T08_TestGenerateListEvent')) THEN
	GVL_VariableHMI.fbPB1_K1_HMI.GetYourEventTable ();

	TcUnit.TEST_FINISHED ();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>