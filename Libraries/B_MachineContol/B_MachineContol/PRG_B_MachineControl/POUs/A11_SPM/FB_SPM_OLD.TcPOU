<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SPM_OLD" Id="{a50e6ba7-f3f0-49ad-938c-37ba5a36d959}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
(*			
	EVERDE sp. z o.o.
	Rafał Osajda		09.09.2025		TC 4024.66
	Główny FB sterujący wywołujący wszystkie moduły maszyny
*)
FUNCTION_BLOCK FB_SPM_OLD EXTENDS FB_SITP IMPLEMENTS ITF_SPM_OLD, ITF_SPM_OLD_HMI_Init
VAR
	bPierwszePrzejscie				: BOOL := FALSE;
//Receptury     
	stReceptury						: ST_Receptury;	
//Loger
	bZamknijStareZgloszenia			: BOOL := TRUE;
//
	fbKomunikator					: B_Baza.FB_Komunikator;
//Lokalne
	iI_PB							: INT;
//                              	
	bParametryUtworz				: BOOL;	//wywolac po pierwszym wgraniu programu lub po zmianach parametrów w programie - zmienia wszystkie parametry, dla zmiany parametru w danym elemencie wywołać polecenia w konkretnbym 

END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (THIS^.bPierwszePrzejscie) THEN		//pierwsze przejście wywoływać przed konfiguracją w pierwszym przejściu maszyny
	IF (THIS^.itfCzas.Praca (bIN	:= TRUE)) THEN
		IF (THIS^.bZamknijStareZgloszenia) THEN
			THIS^.bZamknijStareZgloszenia	:= FALSE;
			THIS^.fbLoger.ZrobPorzadekZNiepozamykanymiZgloszeniami ();
		END_IF
		SUPER^ ();		//Obsługa SITP
		THIS^.stReceptury.fbReceptury ();	//obsługa receptur
		(*	Wywołanie metod co cykl podzespolu	*)
		FOR iI_PB := 0 TO TO_INT (THIS^.iIloscPB) DO
			THIS^.arrPB [iI_PB].WykonywaneCoCykl_Rozkaz ();
			THIS^.arrPB [iI_PB].WykonywaneCoCykl_Operacje ();
			THIS^.arrPB [iI_PB].WykonywaneCoCykl_Status ();
			THIS^.arrPB [iI_PB].WykonywaneCoCykl_ObslugaBledow ();
		END_FOR
	END_IF
END_IF

(*		*)
IF (THIS^.stReceptury.bUtworzSzablony) THEN
	THIS^.stReceptury.bUtworzSzablony			:= FALSE;
	THIS^.UtworzSzablon ();
	THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst := "Zmień nazwę receptury bazowej");
	THIS^.stReceptury.fbReceptury.utworzReceptureZSzablonu (uiNumerSzablonu := 1, stNazwa := THIS^.ZwrocEtykiete ());
END_IF
(*		*)
IF (THIS^.stReceptury.bWybierz) THEN
	THIS^.stReceptury.bWybierz				:= FALSE;
	THIS^.stReceptury.fbReceptury.Wybierz (uiNumer 	:= THIS^.stReceptury.uiNumerWybranej);
	THIS^.stReceptury.bWybrana				:= TRUE;
END_IF
(*	Wywołanie metody towrzącej parametry w podzespołach		*)
IF (THIS^.bParametryUtworz) THEN
	FOR iI_PB := 0 TO TO_INT (THIS^.iIloscPB) DO
		THIS^.arrPB [iI_PB].ParametrUtworz ();
	END_FOR
	THIS^.bParametryUtworz				:= FALSE;
END_IF


]]></ST>
    </Implementation>
    <Folder Name="ITF_SPM_HMI_01" Id="{97b45024-f001-08a3-142b-825d8be11ad1}" />
    <Folder Name="ITF_SPM_HMI_03" Id="{2f1f6967-7067-0dbe-17f4-a8a30e221acd}" />
    <Folder Name="ITF_SPM_HMI_04" Id="{ba890d9c-36f9-0001-23e2-67d41233c4d5}" />
    <Folder Name="ITF_SPM_HMI_06" Id="{d892cd44-c88c-074b-1ea3-7fad6817e5f3}" />
    <Folder Name="ITF_SPM_HMI_Lacznik" Id="{0025acf7-ec2c-0807-2471-7cda9003e28f}" />
    <Method Name="PolaczZTablicami" Id="{89080577-96f3-0716-041b-8bb0c1e51907}" FolderPath="ITF_SPM_HMI_06\">
      <Declaration><![CDATA[METHOD PolaczZTablicami : ST_SPM_HMI_06
VAR
	sttmp			: ST_SPM_HMI_06;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sttmp.refarrStany			REF= THIS^.stSITP.refarrStany;
sttmp.refarrTryby			REF= THIS^.stSITP.arrTryby;
sttmp.refArrPoleceniaStany	REF= THIS^.stSITP.arrPoleceniaZmianyStanu;
sttmp.refArrPoleceniatrybu	REF= THIS^.stSITP.arrPoleceniaZmianyTrybu;

PolaczZTablicami			:= sttmp;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PolaczZTablicamiZmianaTrybu" Id="{81a6e2be-f61a-0791-1c50-ea53db9256be}" FolderPath="ITF_SPM_HMI_04\">
      <Declaration><![CDATA[METHOD PolaczZTablicamiZmianaTrybu : ST_SPM_HMI_04
VAR
	sttmp			: ST_SPM_HMI_04;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sttmp.refarrTryby			REF= THIS^.stSITP.arrTryby;
sttmp.refArrPoleceniatrybu	REF= THIS^.stSITP.arrPoleceniaZmianyTrybu;

PolaczZTablicamiZmianaTrybu	:= sttmp;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PolaczZTablicaReferencji" Id="{449cb881-d060-0958-2ce7-77161737d433}" FolderPath="ITF_SPM_HMI_01\">
      <Declaration><![CDATA[METHOD PolaczZTablicaReferencji : ST_SPM_HMI_01
VAR
	sttmp			: ST_SPM_HMI_01;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sttmp.refstReceptury			REF= THIS^.stReceptury;

PolaczZTablicaReferencji		:= sttmp;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Safety" Id="{83507bfe-92cf-016e-3fcc-5d9602518553}">
      <Declaration><![CDATA[(*			EVERDE sp. z o.o.
	Rafał Osajda		14.11.2024		TC 4026.11		wer. 0.0.0.1
	Metoda obsługująca SAFETY maszyny podstawiwa część obsługa grzyba
*)
METHOD PUBLIC Safety
VAR_INPUT
	bEDM					: BOOL;
END_VAR
VAR_INST
	rtPozwolenieSS1			: R_TRIG;
	ftPozwolenieSS1			: F_TRIG;
	tonOpoznienie			: TON;
	rtReset					: R_TRIG;
	iKrok					: INT;
	bWymusOpoznienie		: BOOL;
	ftStyk					: Tc2_Standard.F_TRIG;
END_VAR
VAR
	bBladGrupySafety		: BOOL;
	bResetZReki				: BOOL;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.refstsafety.flSS1.set (bIN		:= THIS^.refstSafety.stStanyGrupy1.bSS1);	//przepisanie z wyjścia programu safety na flagi dla programu plc 
THIS^.refstsafety.flSTO.set (bIN		:= THIS^.refstSafety.stStanyGrupy1.bSTO);
THIS^.refstsafety.flGrzybCh1a.set (bIN	:= THIS^.refstSafety.stStanyGrupy1.bStyk1A);
THIS^.refstsafety.flGrzybCh1b.set (bIN	:= THIS^.refstSafety.stStanyGrupy1.bStyk1B);

rtPozwolenieSS1 (CLK		:= THIS^.refstSafety.stGroupStates1.bSS1);
ftPozwolenieSS1 (CLK		:= THIS^.refstSafety.stGroupStates1.bSS1);
THIS^.refstSafety.stGroupStates1.bL1_EDM		:= bEDM;

bBladGrupySafety			:= THIS^.refstSafety.stGroupStates1.bComError OR
								THIS^.refstSafety.stGroupStates1.bFbError OR
								THIS^.refstSafety.stGroupStates1.bOthError;
tonOpoznienie (PT 			:= T#500MS);

CASE iKrok OF
	0	:
		IF (rtReset.Q) THEN
			iKrok							:= iKrok + 10;
		END_IF
	10	:	// Reset bledu grupy - jesli jest
		THIS^.refstSafety.bErrAck				:= THIS^.refstSafety.stGroupStates1.bComError OR
												THIS^.refstSafety.stGroupStates1.bFbError OR
												THIS^.refstSafety.stGroupStates1.bOthError;
		bWymusOpoznienie						S= THIS^.refstSafety.bErrAck;
		IF (NOT THIS^.refstSafety.bErrAck) THEN
			IF (bWymusOpoznienie) THEN
				iKrok						:= iKrok + 10;
				tonOpoznienie.IN			:= TRUE;
			ELSE
				iKrok						:= 30;
			END_IF
		END_IF											
	20	:	//Opozenienie
		IF (tonOpoznienie.Q) THEN
			bWymusOpoznienie				:= FALSE;
			tonOpoznienie.IN				:= FALSE;
			iKrok							:= iKrok + 10;
		END_IF
	30	: // Reset blokow SAFETY - grupa 1
		THIS^.refstSafety.stGroupStates1.bFB_Reset	:= TRUE;
		iKrok								:= iKrok + 10;
	40	:// Reset blokow SAFETY
		THIS^.refstSafety.stGroupStates1.bFB_Reset	:= FALSE;
		iKrok								:= 0;
END_CASE


]]></ST>
      </Implementation>
    </Method>
    <Method Name="UstawBrakUstawionejReceptury" Id="{897f86c4-e56a-0eac-03db-158e48a7c030}" FolderPath="ITF_SPM_HMI_Lacznik\">
      <Declaration><![CDATA[METHOD UstawBrakUstawionejReceptury : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stReceptury.fbReceptury.WyzerujUstawionaRecepture ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZwrocCalkowityCzasPracy" Id="{8582c088-a63f-0b1b-2db8-499bbcb2a05d}" FolderPath="ITF_SPM_HMI_06\">
      <Declaration><![CDATA[METHOD ZwrocCalkowityCzasPracy : STRING
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ZwrocCalkowityCzasPracy			:= THIS^.itfCzas.Czas_To_String (ltCzas := THIS^.tCzas, bPokazMS := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZwrocCzySaNoweZgloszeniaWSystemie" Id="{e704bb70-335f-0705-3f25-4e18d352ef94}" FolderPath="ITF_SPM_HMI_03\">
      <Declaration><![CDATA[METHOD PUBLIC ZwrocCzySaNoweZgloszeniaWSystemie : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ZwrocCzySaNoweZgloszeniaWSystemie			:= THIS^.fbLoger.ZwrocCzyJestNoweZgloszenie ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZwrocCzyWybranaReceptura" Id="{de401c00-eac9-08ae-173d-685ccb0c222f}" FolderPath="ITF_SPM_HMI_Lacznik\">
      <Declaration><![CDATA[METHOD ZwrocCzyWybranaReceptura : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ZwrocCzyWybranaReceptura			:= THIS^.stReceptury.fbReceptury.ZwrocCzyWybrana ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZwrocZmianaTrybu" Id="{0a092b57-ccc8-098d-2778-90466fcca96e}" FolderPath="ITF_SPM_HMI_06\">
      <Declaration><![CDATA[METHOD ZwrocZmianaTrybu : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ZwrocZmianaTrybu				:= THIS^.stSITP.bBylaZmianaTrybu;
THIS^.stSITP.bBylaZmianaTrybu	:= FALSE;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>