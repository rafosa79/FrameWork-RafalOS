<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SPM" Id="{2336c2e9-374c-0eb6-2f94-5805ed11ab64}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
(*			
	EVERDE sp. z o.o.
	Rafał Osajda		24.02.2025		TC 4026.13		wer. 0.0.0.1
	Obsługa stanów i tróbów pracy - przełączanie pomiędzy, liczenie czasu w danych stanie i Główny FB sterujący wywołujący wszystkie moduły maszyny 
*)
FUNCTION_BLOCK FB_SPM EXTENDS B_Baza.FB_PodzespolBazowy IMPLEMENTS B_Baza.ITF_SITP, ITF_SPM, ITF_SPM_HMI_Init
VAR
	stSITP						: ST_SITP;				//wszystkie zmienne modułu zamknięte w ST bo potem będzie z tego ST dziedziczone i żeby było pogrupowane
	stSITPDaneElementu			: ST_SITP_DaneElementu;	//dane dla stanów./ trybów przy sprawdzaniu czy jest możliwa zmiana
(*	SAFETY	*)
	refstSafety					: REFERENCE TO ST_Safety; 
(*	Podzespoly bazowe	*)
	arrPB						: ARRAY [0..B_Baza.STALE.MAX_ILOSC_PB] OF B_Baza.ITF_PodzespolBazowy;
	iIloscPB					: INT := -1;
	uiIloscElementow			: UINT;		//liczba elementow które są na maszynie 
(*	Loger bledow		*)
	fbLoger						: B_Baza.FB_Loger;
	bZamknijStareZgloszenia			: BOOL := TRUE;
(*	Receptury			*)
	stReceptury						: ST_Receptury;	
(*	Komunikator			*)
	fbKomunikator					: B_Baza.FB_Komunikator;
(*	Lokalne				*)
	iI_PB							: INT;
	bPierwszePrzejscie				: BOOL := FALSE;
	bParametryUtworz				: BOOL;	//wywolac po pierwszym wgraniu programu lub po zmianach parametrów w programie - zmienia wszystkie parametry, dla zmiany parametru w danym elemencie wywołać polecenia w konkretnbym 
END_VAR
VAR PERSISTENT
	tCzas						: LTIME;	//całkowity czas pracy
	fbCzas						: B_Baza.FB_Czas;
	fbLokalizacja				: B_Baza.FB_Lokalizacja;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (THIS^.bPierwszePrzejscie) THEN		//pierwsze przejście wywoływać przed konfiguracją w pierwszym przejściu maszyny
	IF (THIS^.itfCzas.Praca (bIN	:= TRUE)) THEN
		IF (THIS^.bZamknijStareZgloszenia) THEN
			THIS^.bZamknijStareZgloszenia	:= FALSE;
			THIS^.fbLoger.ZrobPorzadekZNiepozamykanymiZgloszeniami ();
		END_IF
	(*	Obsługa logera błędów	*)
		THIS^.fbLoger ();		
		THIS^.ObslugaSITP ();	//Obsługa SITP
		THIS^.stReceptury.fbReceptury ();	//obsługa receptur
		(*	Wywołanie metod co cykl podzespolu	*)
		FOR iI_PB := 0 TO TO_INT (THIS^.iIloscPB) DO
			THIS^.arrPB [iI_PB].WykonywaneCoCykl_Rozkaz ();
			THIS^.arrPB [iI_PB].WykonywaneCoCykl_Operacje ();
			THIS^.arrPB [iI_PB].WykonywaneCoCykl_Status ();
			THIS^.arrPB [iI_PB].WykonywaneCoCykl_ObslugaBledow ();
		END_FOR
	END_IF
END_IF

	(*		Szablony				*)

IF (THIS^.stReceptury.bUtworzSzablony) THEN
	THIS^.stReceptury.bUtworzSzablony			:= FALSE;
	THIS^.UtworzSzablon ();
	THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst := "Zmień nazwę receptury bazowej");
	THIS^.stReceptury.fbReceptury.utworzReceptureZSzablonu (uiNumerSzablonu := 1, stNazwa := THIS^.ZwrocEtykiete ());
END_IF

	(*		Receptry				*)
IF (THIS^.stReceptury.bWybierz) THEN
	THIS^.stReceptury.bWybierz				:= FALSE;
	THIS^.stReceptury.fbReceptury.Wybierz (uiNumer 	:= THIS^.stReceptury.uiNumerWybranej);
	THIS^.stReceptury.bWybrana				:= TRUE;
END_IF

	(*		Wywołanie metody towrzącej parametry w podzespołach		*)

IF (THIS^.bParametryUtworz) THEN
	FOR iI_PB := 0 TO TO_INT (THIS^.iIloscPB) DO
		THIS^.arrPB [iI_PB].ParametrUtworz ();
	END_FOR
	THIS^.bParametryUtworz				:= FALSE;
END_IF

]]></ST>
    </Implementation>
    <Folder Name="A00_Init" Id="{243cc689-5610-0d0c-1679-112394308e2b}" />
    <Folder Name="A01_PierwszePrzejscie" Id="{e49b7161-2bbe-0079-39e4-fdb18390ce4b}" />
    <Folder Name="A02_SITP" Id="{53e33c4e-c8f4-0cf8-0aaa-37e54336f3d0}" />
    <Folder Name="ITF_SITP" Id="{07df922c-50ef-022d-2491-0e8ff3cd02ca}" />
    <Folder Name="Konfiguracja" Id="{e39f417a-5f47-039a-0994-535e1a958375}" />
    <Folder Name="Szablony" Id="{51fb97a3-422e-00d4-0baa-f63766f5da55}" />
    <Folder Name="WiazanieZmiennych" Id="{64c22d2c-1c6f-08f2-12e0-c8b39f25c4d4}" />
    <Folder Name="Zgloszenia" Id="{781c7f1e-c6e5-0bca-395a-0d700cd5f442}" />
    <Method Name="AktualizacjaLicznikowCzasu" Id="{1ece5d65-0a73-0f6c-2b0e-500eb7178083}" FolderPath="A02_SITP\">
      <Declaration><![CDATA[METHOD PRIVATE AktualizacjaLicznikowCzasu
VAR_INST
	tonInterwal				: Tc2_Standard.TON;
	rtInterwal				: Tc2_Standard.R_TRIG;
	tInterwal				: TIME := T#100MS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.stSITP.eStan <> B_Baza.E_StanyPracy.Undefined AND THIS^.stSITP.eTryb <> B_Baza.E_TrybyPracy.Niedozwolony) THEN
	rtInterwal (CLK := tonInterwal.Q);
	tonInterwal (IN := NOT rtInterwal.Q, PT := tInterwal);
	IF (rtInterwal.Q) THEN
		THIS^.tCzas				:= THIS^.tCzas + TO_LTIME (tInterwal);
		THIS^.stSITP.refarrStany [THIS^.stSITP.eStan].AktualizujCzas (tInterwal := tInterwal);
		THIS^.stSITP.arrTryby [THIS^.stSITP.eTryb].AktualizujCzas (tInterwal := tInterwal);
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="dodajPB" Id="{c08d9765-f009-00ea-1f04-b9825fdafbce}">
      <Declaration><![CDATA[METHOD PUBLIC dodajPB : BOOL
VAR_INPUT
	itfPB				: B_Baza.ITF_PodzespolBazowy;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.iIloscPB + 1 <= TO_INT (B_Baza.STALE.MAX_ILOSC_PB)) THEN
	THIS^.iIloscPB					:= THIS^.iIloscPB + 1;
	THIS^.arrPB [THIS^.iIloscPB]	:= itfPB;

	THIS^.arrPB [THIS^.iIloscPB].PowiazCzas (fbCzas				:= THIS^.itfCzas);
	THIS^.arrPB [THIS^.iIloscPB].PowiazJezyk (fbLokalizacja 	:= THIS^.fbLokalizacja);
	THIS^.arrPB [THIS^.iIloscPB].PowiazLoger (fbLoger 			:= THIS^.fbLoger);
	THIS^.arrPB [THIS^.iIloscPB].PowiazSS1 (fbSS1 				:= THIS^.refstSafety.fbSS1);
	THIS^.arrPB [THIS^.iIloscPB].PowiazSTO (fbSTO	 			:= THIS^.refstSafety.fbSTO);
	THIS^.arrPB [THIS^.iIloscPB].PowiazSITP (fbSITP 			:= THIS^);
	THIS^.arrPB [THIS^.iIloscPB].PowiazKomunikator (itfKomunikator	:= THIS^.fbKomunikator);
	
	THIS^.uiIloscElementow 										:= THIS^.arrPB [THIS^.iIloscPB].ustawID (uiID := THIS^.uiIloscElementow + 1);
	THIS^.fbLoger.UstawIloscZgloszenWSystemie (uiIlosc			:= THIS^.arrPB [THIS^.iIloscPB].ZgloszenieUstawID (uiID := THIS^.fbLoger.ZwrocIloscZgloszenWSystemie ()));
	THIS^.arrPB [THIS^.iIloscPB].ustawKod (sKod					:= '0.0.0.0.0', sDopisz := TO_STRING (THIS^.iIloscPB));
	
	dodajPB														:= TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{48ed9e3e-a061-0f42-172f-332e54cd147f}" FolderPath="A00_Init\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
VAR
	sttmpEtykieta				: B_Baza.ST_Etykieta;
	arrPoleceniaZmianyTrybu		: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	(*	Dodanie komponentów do SITP	 przyciski, lampki inne elementy systemu	*)

THIS^.FB_Init_01_DodawanieKomponentow ();
THIS^.FB_Init_02_PrzypisanieStanowDlaTrybow ();
THIS^.FB_Init_03_PrzypisanieTrybow ();
THIS^.FB_Init_04_PrzypisanieLampekDoSygnalizacjiStanow ();

	(*	Przypisanie zmiennych podstawowych dla elementów	*)

THIS^.PowiazCzas (fbCzas									:= THIS^.fbCzas);
THIS^.PowiazJezyk (fbLokalizacja							:= THIS^.fbLokalizacja);
THIS^.PowiazLoger (fbLoger									:= THIS^.fbLoger);

	(*	Powiązanie zmienyych dla logera						*)

THIS^.fbLoger.PowiazCzas (fbCzas							:= THIS^.fbCzas);
THIS^.fbLoger.PowiazJezyk (fbLokalizacja 					:= THIS^.fbLokalizacja);
THIS^.fbLoger.PowiazLoger (fbLoger							:= THIS^.fbLoger);

	(*	Spięcie zmiennych receptur		*)
	
THIS^.stReceptury.fbReceptury.PowiazJezyk (fbLokalizacja	:= THIS^.fbLokalizacja);
THIS^.stReceptury.fbReceptury.PowiazLoger (fbLoger			:= THIS^.fbLoger);
THIS^.stReceptury.fbReceptury.PowiazCzas (fbCzas			:= THIS^.fbCzas);

	(*	Podzespoly bazowe	*)	

THIS^.stSITPDaneElementu.refarrPB							REF= THIS^.arrPB;	
	
	(*	Stany i tryby		*)

THIS^.stSITPDaneElementu.refeAktualnyStan					REF= THIS^.stSITP.eStan;
THIS^.stSITPDaneElementu.refeaktualnyTryb					REF= THIS^.stSITP.eTryb;
THIS^.stSITP.refarrStany									REF= THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony];
THIS^.stSITPDaneElementu.refbZredukowanaLiczbaPrzyciskow 	REF= THIS^.stSITP.bZredukowanaLiczbaPrzyciskow;
THIS^.stSITPDaneElementu.refarrTrybyWlaczone				REF= THIS^.stSITP.arrTrybyWlaczone;
THIS^.stSITPDaneElementu.refbWyjdzZestanuAktywnego			REF= THIS^.stSITP.bWyjdzZestanuAktywnego;

	(*	Podpięcie do systemu damego siebie 	*)

THIS^.PrzypiszTekst (eJezyk 								:= B_Baza.E_Jezyki.pl, wsTekst := "SYSTEM");
THIS^.PrzypiszTekst (eJezyk 								:= B_Baza.E_Jezyki.en, wsTekst := "SYSTEM");
THIS^.PrzypiszTekst (eJezyk 								:= B_Baza.E_Jezyki.de, wsTekst := "SYSTEM");
THIS^.ustawNazwe (stEtykieta								:= THIS^.ZwrocEtykiete ());

	(*	Ustawienie pierwszego elemtnu ID	*)

THIS^.fbLoger.UstawIloscZgloszenWSystemie (uiIlosc			:= THIS^.ZgloszenieUstawID (uiID := 1));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init_01_DodawanieKomponentow" Id="{7766f4f2-2505-0a4c-28a2-a721b4b961b3}" FolderPath="A00_Init\">
      <Declaration><![CDATA[METHOD PRIVATE FB_Init_01_DodawanieKomponentow
VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.brak]			:= GVL_IO.fbprUndefined;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprUndefined);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : Undefined", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.brak].ustawNazwe (stEtykieta := THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Abort]		:= GVL_IO.fbprAbort;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprAbort);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : Abort", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Abort].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Clear]		:= GVL_IO.fbprClear;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprClear);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : Clear", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Clear].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Reset]		:= GVL_IO.fbprReset;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprReset);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : Reset", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Reset].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Start]		:= GVL_IO.fbprStart;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprStart);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : Start", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Start].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Stop]			:= GVL_IO.fbprStop;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprStop);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : Stop", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Stop].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Hold]			:= GVL_IO.fbprHold;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprHold);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : Hold", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Hold].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Unhold]		:= GVL_IO.fbprUnhold;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprUnhold);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : UnHold", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Unhold].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Suspend]		:= GVL_IO.fbprSuspend;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprSuspend);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : Suspend", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Suspend].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Unsuspend]	:= GVL_IO.fbprUnsuspend;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprUnsuspend);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : UnSuspend", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Unsuspend].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Complete]		:= GVL_IO.fbprComplete;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprComplete);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany stanu na : Complete", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Complete].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

//TRYBY

THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.brak]			:= GVL_IO.fbprNiedozwolony;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprUndefined);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Undefined", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.brak].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.Produkcja]	:= GVL_IO.fbprProdukcja;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprProdukcja);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Produkcja", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.Produkcja].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.Konserwacja]	:= GVL_IO.fbprKonserwacja;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprKonserwacja);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Konserwacja", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.Konserwacja].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.Reczny]		:= GVL_IO.fbprReczny;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprReczny);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Ręczny", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.Reczny].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.Mycie]		:= GVL_IO.fbprMycie;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprMycie);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Mycie", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.Mycie].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.Diagnostyka]	:= GVL_IO.fbprDiagnostyka;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprDiagnostyka);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Użytkownika1", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.Diagnostyka].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());
(*
THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.Uzytkownika2]	:= GVL_IO.fbprUzytkownika2;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprUzytkownika2);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Użytkownika2", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.Uzytkownika2].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.Uzytkownika3]	:= GVL_IO.fbprUzytkownika3;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprUzytkownika3);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Użytkownika3", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.Uzytkownika3].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.Uzytkownika4]	:= GVL_IO.fbprUzytkownika4;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprUzytkownika4);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Użytkownika4", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.Uzytkownika4].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrPoleceniaZmianyTrybu [E_SITP_PolecenieZmianyTrybu.Uzytkownika5]	:= GVL_IO.fbprUzytkownika5;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbprUzytkownika5);
THIS^.PrzypiszTekst (wsTekst	:= "Polecenie zmiany trybu na : Użytkownika5", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyTrybu.Uzytkownika5].ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());
*)
	(*	Lampki sygnalizacyjne	*)

	(* 	Wieża sygnalizacyjna	*)
	
THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.WiezaCzerwona]	:= GVL_IO.fbLWiezaCzerwona;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbLWiezaCzerwona);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - wieża - czerwona", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fbLWiezaCzerwona.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.WiezaZolta]	:= GVL_IO.fbLWiezaZolta;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbLWiezaZolta);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - wieża - żółta", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fbLWiezaZolta.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.WiezaZielona]	:= GVL_IO.fbLWiezaZielona;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbLWiezaZielona);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - wieża - zielona", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fbLWiezaZielona.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.WiezaBiala]	:= GVL_IO.fbLWiezaBiala;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbLWiezaBiala);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - wieża - biała", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fbLWiezaBiala.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.WiezaNiebieska]	:= GVL_IO.fbLWiezaNiebieska;
THIS^.DodajKomponent (itfK			:= GVL_IO.fbLWiezaNiebieska);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - wieża - niebieska", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fbLWiezaNiebieska.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

	(*	Lampki przycisków	*)

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskReset]	:= GVL_IO.fblprzReset;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzReset);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - Reset", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzReset.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskStart]	:= GVL_IO.fblprzStart;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzStart);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - Start", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzStart.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskStop]	:= GVL_IO.fblprzStop;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzStop);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - Stop", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzStop.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskHold]	:= GVL_IO.fblprzHold;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzHold);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - Hold", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzHold.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskUnhold]	:= GVL_IO.fblprzUnhold;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzUnhold);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - UnHold", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzUnhold.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskSuspend]	:= GVL_IO.fblprzSuspend;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzSuspend);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - Suspend", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzSuspend.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskUnsuspend]	:= GVL_IO.fblprzUnsuspend;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzUnsuspend);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - UnSuspend", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzUnsuspend.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskAbort]	:= GVL_IO.fblprzAbort;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzAbort);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - Abort", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzAbort.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskClear]	:= GVL_IO.fblprzClear;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzClear);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - Clear", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzClear.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());

THIS^.stSITP.arrLampki [E_SITP_LampkiSygnalizacyjne.PrzyciskComplete]	:= GVL_IO.fblprzComplete;
THIS^.DodajKomponent (itfK			:= GVL_IO.fblprzComplete);
THIS^.PrzypiszTekst (wsTekst	:= "Lampoa sygnalizacyjna - przycisk - Complete", eJezyk := E_Jezyki.pl);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.en);
THIS^.PrzypiszTekst (wsTekst	:= "", eJezyk := E_Jezyki.de);
GVL_IO.fblprzComplete.ustawNazwe (stEtykieta	:= THIS^.ZwrocEtykiete ());
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init_02_PrzypisanieStanowDlaTrybow" Id="{c9f05a36-a90d-0373-1e55-48272fe6b43b}" FolderPath="A00_Init\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		16.07.2025		TC 4024.66
	Przypisanie wartości do stanów
*)
METHOD PRIVATE FB_Init_02_PrzypisanieStanowDlaTrybow
VAR
	iI					: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iI := 0 TO STALE.ILOSC_TRYBOW_PRACY DO
	THIS^.stSITP.stStany [iI].fbUndefined.PowiazDane (stDaneSITP		:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbAborting.PowiazDane (stDaneSITP			:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbAborted.PowiazDane (stDaneSITP			:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbClearing.PowiazDane (stDaneSITP			:= THIS^.stSITPDaneElementu);	
	THIS^.stSITP.stStany [iI].fbStopping.PowiazDane (stDaneSITP			:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbStopped.PowiazDane (stDaneSITP			:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbResetting.PowiazDane (stDaneSITP		:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbIdle.PowiazDane (stDaneSITP				:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbStarting.PowiazDane (stDaneSITP			:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbExecute.PowiazDane (stDaneSITP			:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbSuspending.PowiazDane (stDaneSITP		:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbSuspended.PowiazDane (stDaneSITP		:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbUnsuspending.PowiazDane (stDaneSITP		:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbHolding.PowiazDane (stDaneSITP			:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbHeld.PowiazDane (stDaneSITP				:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbUnholding.PowiazDane (stDaneSITP		:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbCompleting.PowiazDane (stDaneSITP		:= THIS^.stSITPDaneElementu);
	THIS^.stSITP.stStany [iI].fbComplete.PowiazDane (stDaneSITP			:= THIS^.stSITPDaneElementu);


	THIS^.stSITP.arrStanyWszystkichTrybow [iI][0] 						:= THIS^.stSITP.stStany [iI].fbUndefined;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][1] 						:= THIS^.stSITP.stStany [iI].fbAborting;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][2] 						:= THIS^.stSITP.stStany [iI].fbAborted;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][3] 						:= THIS^.stSITP.stStany [iI].fbClearing;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][4] 						:= THIS^.stSITP.stStany [iI].fbStopping;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][5] 						:= THIS^.stSITP.stStany [iI].fbStopped;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][6] 						:= THIS^.stSITP.stStany [iI].fbResetting;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][7] 						:= THIS^.stSITP.stStany [iI].fbIdle;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][8] 						:= THIS^.stSITP.stStany [iI].fbStarting;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][9] 						:= THIS^.stSITP.stStany [iI].fbExecute;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][10] 						:= THIS^.stSITP.stStany [iI].fbSuspending;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][11] 						:= THIS^.stSITP.stStany [iI].fbSuspended;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][12] 						:= THIS^.stSITP.stStany [iI].fbUnsuspending;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][13] 						:= THIS^.stSITP.stStany [iI].fbHolding;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][14] 						:= THIS^.stSITP.stStany [iI].fbHeld;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][15] 						:= THIS^.stSITP.stStany [iI].fbUnholding;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][16] 						:= THIS^.stSITP.stStany [iI].fbCompleting;
	THIS^.stSITP.arrStanyWszystkichTrybow [iI][17] 						:= THIS^.stSITP.stStany [iI].fbComplete;

END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init_03_PrzypisanieTrybow" Id="{f1d0878a-4bd5-0dea-1efd-1a34428a233b}" FolderPath="A00_Init\">
      <Declaration><![CDATA[METHOD PRIVATE FB_Init_03_PrzypisanieTrybow
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stSITP.stTryby.fbNiedozwolony.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [0] := THIS^.stSITP.stTryby.fbNiedozwolony;

THIS^.stSITP.stTryby.fbProdukcja.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [1] := THIS^.stSITP.stTryby.fbProdukcja;

THIS^.stSITP.stTryby.fbKonserwacja.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [2] := THIS^.stSITP.stTryby.fbKonserwacja;

THIS^.stSITP.stTryby.fbReczny.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [3] := THIS^.stSITP.stTryby.fbReczny;

THIS^.stSITP.stTryby.fbMycie.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [4] := THIS^.stSITP.stTryby.fbMycie;

THIS^.stSITP.stTryby.fbDiagnostyka.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [5] := THIS^.stSITP.stTryby.fbDiagnostyka;

THIS^.stSITP.stTryby.fbUzytkownika2.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [6] := THIS^.stSITP.stTryby.fbUzytkownika2;

THIS^.stSITP.stTryby.fbUzytkownika3.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [7] := THIS^.stSITP.stTryby.fbUzytkownika3;

THIS^.stSITP.stTryby.fbUzytkownika4.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [8] := THIS^.stSITP.stTryby.fbUzytkownika4;

THIS^.stSITP.stTryby.fbUzytkownika5.PowiazDane (stDaneSITP := THIS^.stSITPDaneElementu);
THIS^.stSITP.arrTryby [9] := THIS^.stSITP.stTryby.fbUzytkownika5;

THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst	:= "Nieokreślony");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst	:= "Undefined");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst	:= "Unbestimmt");
THIS^.stSITP.arrTryby [0].UstawNazwe (stNazwa := THIS^.ZwrocEtykiete ());
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst	:= "Produkcja"); 
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst	:= "Production");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst	:= "Produktion");
THIS^.stSITP.arrTryby [1].UstawNazwe (stNazwa := THIS^.ZwrocEtykiete ());
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst	:= "Konserwacja");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst	:= "Maintenance");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst	:= "Wartung");    
THIS^.stSITP.arrTryby [2].UstawNazwe (stNazwa := THIS^.ZwrocEtykiete ());
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst	:= "Ręczny");  
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst	:= "Manual");  
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst	:= "Handbuch");
THIS^.stSITP.arrTryby [3].UstawNazwe (stNazwa := THIS^.ZwrocEtykiete ());
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst	:= "Mycie");  
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst	:= "Washing");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst	:= "Waschen");
THIS^.stSITP.arrTryby [4].UstawNazwe (stNazwa := THIS^.ZwrocEtykiete ());]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init_04_PrzypisanieLampekDoSygnalizacjiStanow" Id="{33c2df66-1466-00b6-021a-28804417b16e}" FolderPath="A00_Init\">
      <Declaration><![CDATA[METHOD PRIVATE FB_Init_04_PrzypisanieLampekDoSygnalizacjiStanow
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stSITP.stSygnalizacjaStanu.fbUndefined.PowiazTablice (refarrLampki	:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbAborting.PowiazTablice (refarrLampki		:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbAborted.PowiazTablice (refarrLampki		:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbClearing.PowiazTablice (refarrLampki		:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbStopping.PowiazTablice (refarrLampki		:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbStopped.PowiazTablice (refarrLampki		:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbResetting.PowiazTablice (refarrLampki	:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbIdle.PowiazTablice (refarrLampki			:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbStarting.PowiazTablice (refarrLampki		:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbExecute.PowiazTablice (refarrLampki		:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbSuspending.PowiazTablice (refarrLampki	:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbSuspended.PowiazTablice (refarrLampki	:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbUnsuspending.PowiazTablice (refarrLampki	:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbHolding.PowiazTablice (refarrLampki		:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbHeld.PowiazTablice (refarrLampki			:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbUnholding.PowiazTablice (refarrLampki	:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbCompleting.PowiazTablice (refarrLampki	:= THIS^.stSITP.arrLampki);
THIS^.stSITP.stSygnalizacjaStanu.fbComplete.PowiazTablice (refarrLampki		:= THIS^.stSITP.arrLampki);

THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Undefined]		:= THIS^.stSITP.stSygnalizacjaStanu.fbUndefined;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Aborting]		:= THIS^.stSITP.stSygnalizacjaStanu.fbAborting;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Aborted]		:= THIS^.stSITP.stSygnalizacjaStanu.fbAborted;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Clearing]		:= THIS^.stSITP.stSygnalizacjaStanu.fbClearing;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Stopping]		:= THIS^.stSITP.stSygnalizacjaStanu.fbStopping;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Stopped]		:= THIS^.stSITP.stSygnalizacjaStanu.fbStopped;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Resetting]		:= THIS^.stSITP.stSygnalizacjaStanu.fbResetting;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Idle]			:= THIS^.stSITP.stSygnalizacjaStanu.fbIdle;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Starting]		:= THIS^.stSITP.stSygnalizacjaStanu.fbStarting;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Execute]		:= THIS^.stSITP.stSygnalizacjaStanu.fbExecute;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Suspending]	:= THIS^.stSITP.stSygnalizacjaStanu.fbSuspending;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Suspended]		:= THIS^.stSITP.stSygnalizacjaStanu.fbSuspended;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Unsuspending]	:= THIS^.stSITP.stSygnalizacjaStanu.fbUnsuspending;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Holding]		:= THIS^.stSITP.stSygnalizacjaStanu.fbHolding;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Held]			:= THIS^.stSITP.stSygnalizacjaStanu.fbHeld;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Unholding]		:= THIS^.stSITP.stSygnalizacjaStanu.fbUnholding;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Completing]	:= THIS^.stSITP.stSygnalizacjaStanu.fbCompleting;
THIS^.stSITP.arrSygnalizacjaStanu [B_Baza.E_StanyPracy.Complete]		:= THIS^.stSITP.stSygnalizacjaStanu.fbComplete;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Inicjalizacja" Id="{3f9c2c95-9088-0768-0532-a1a27b32bbc2}" FolderPath="A00_Init\">
      <Declaration><![CDATA[{attribute 'call_after_init'}
METHOD PRIVATE Inicjalizacja
VAR
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*	Aktywacja podstawowych trybów pracy 	*)
	THIS^.stSITP.arrTryby [B_Baza.E_TrybyPracy.Niedozwolony].ustawWlaczony (TRUE);
	THIS^.stSITP.arrTryby [B_Baza.E_TrybyPracy.Produkcja].ustawWlaczony (TRUE);
	THIS^.stSITP.arrTryby [B_Baza.E_TrybyPracy.Konserwacja].ustawWlaczony (TRUE);
	THIS^.stSITP.arrTryby [B_Baza.E_TrybyPracy.Reczny].ustawWlaczony (TRUE);
	THIS^.stSITP.arrTryby [B_Baza.E_TrybyPracy.Mycie].ustawWlaczony (TRUE);
	THIS^.Inicjalizacja_PrzypisanieWlaczonychTrybowDoTablicy ();
	
(*	Konfiguracja aktywnych stanów pracy dla każdego aktywnego trybu *)
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Undefined	].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Aborting     ].ustawWlaczony (FALSE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Aborted      ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Clearing     ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Stopping     ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Stopped      ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Resetting    ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Idle         ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Starting     ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Execute      ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Suspending   ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Suspended    ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Unsuspending ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Holding      ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Held         ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Unholding    ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Completing   ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Niedozwolony][B_Baza.E_StanyPracy.Complete     ].ustawWlaczony (FALSE);
	THIS^.Inicjalizacja_PrzypisanieWlaczonychStanowDoTablicy (eTryb	:= B_Baza.E_TrybyPracy.Niedozwolony);
	
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Undefined	].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Aborting     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Aborted      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Clearing     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Stopping     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Stopped      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Resetting    ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Idle         ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Starting     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Execute      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Suspending   ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Suspended    ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Unsuspending ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Holding      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Held         ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Unholding    ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Completing   ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Produkcja][B_Baza.E_StanyPracy.Complete     ].ustawWlaczony (TRUE);
	THIS^.Inicjalizacja_PrzypisanieWlaczonychStanowDoTablicy (eTryb	:= B_Baza.E_TrybyPracy.Produkcja);

	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Undefined	].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Aborting     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Aborted      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Clearing     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Stopping     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Stopped      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Resetting    ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Idle         ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Starting     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Execute      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Suspending   ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Suspended    ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Unsuspending ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Holding      ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Held         ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Unholding    ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Completing   ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Konserwacja][B_Baza.E_StanyPracy.Complete     ].ustawWlaczony (false);
	THIS^.Inicjalizacja_PrzypisanieWlaczonychStanowDoTablicy (eTryb	:= B_Baza.E_TrybyPracy.Konserwacja);

	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Undefined	].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Aborting     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Aborted      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Clearing     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Stopping     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Stopped      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Resetting    ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Idle         ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Starting     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Execute      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Suspending   ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Suspended    ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Unsuspending ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Holding      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Held         ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Unholding    ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Completing   ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanywszystkichTrybow [B_Baza.E_TrybyPracy.Reczny][B_Baza.E_StanyPracy.Complete     ].ustawWlaczony (TRUE);
	THIS^.Inicjalizacja_PrzypisanieWlaczonychStanowDoTablicy (eTryb	:= B_Baza.E_TrybyPracy.Reczny);

	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Undefined	   ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Aborting     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Aborted      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Clearing     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Stopping     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Stopped      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Resetting    ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Idle         ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Starting     ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Execute      ].ustawWlaczony (TRUE);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Suspending   ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Suspended    ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Unsuspending ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Holding      ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Held         ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Unholding    ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Completing   ].ustawWlaczony (false);
	THIS^.stSITP.arrStanyWszystkichTrybow [B_Baza.E_TrybyPracy.Mycie][B_Baza.E_StanyPracy.Complete     ].ustawWlaczony (false);
	THIS^.Inicjalizacja_PrzypisanieWlaczonychStanowDoTablicy (eTryb	:= B_Baza.E_TrybyPracy.Mycie);

(*	Możliwość przejścia pomiędzy trybami w stanie	*)
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Undefined][B_Baza.E_TrybyPracy.Niedozwolony]	:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Undefined][B_Baza.E_TrybyPracy.Produkcja]		:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Undefined][B_Baza.E_TrybyPracy.Konserwacja]	:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Undefined][B_Baza.E_TrybyPracy.Reczny]		:= TRUE;

	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Aborted][B_Baza.E_TrybyPracy.Produkcja]		:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Aborted][B_Baza.E_TrybyPracy.Konserwacja]		:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Aborted][B_Baza.E_TrybyPracy.Reczny]			:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Aborted][B_Baza.E_TrybyPracy.Mycie]			:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Aborted][B_Baza.E_TrybyPracy.Diagnostyka]	:= TRUE;
	//THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Aborted][B_Baza.E_TrybyPracy.Uzytkownika2]	:= TRUE;
	//THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Aborted][B_Baza.E_TrybyPracy.Uzytkownika3]	:= TRUE;
	//THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Aborted][B_Baza.E_TrybyPracy.Uzytkownika4]	:= TRUE;
	//THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Aborted][B_Baza.E_TrybyPracy.Uzytkownika5]	:= TRUE;
	
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Stopped][B_Baza.E_TrybyPracy.Produkcja]		:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Stopped][B_Baza.E_TrybyPracy.Konserwacja]		:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Stopped][B_Baza.E_TrybyPracy.Reczny]			:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Stopped][B_Baza.E_TrybyPracy.Mycie]			:= TRUE;
	THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Stopped][B_Baza.E_TrybyPracy.Diagnostyka]	:= TRUE;
	//THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Stopped][B_Baza.E_TrybyPracy.Uzytkownika2]	:= TRUE;
	//THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Stopped][B_Baza.E_TrybyPracy.Uzytkownika3]	:= TRUE;
	//THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Stopped][B_Baza.E_TrybyPracy.Uzytkownika4]	:= TRUE;
	//THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [B_Baza.E_StanyPracy.Stopped][B_Baza.E_TrybyPracy.Uzytkownika5]	:= TRUE;
	
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Inicjalizacja_PrzypisanieWlaczonychStanowDoTablicy" Id="{25aa963a-19e5-02f5-1ac2-91a1ec5e98fd}" FolderPath="A00_Init\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.06.2025		TC 4024.66
	Przypisanie do tablicy ST_SITP arrStanyWlaczoneWTrybie wartosci wlaczenia stanow
	Wartości przypisywane tylko na początku potem jest tylko odczyt
*)
METHOD PRIVATE Inicjalizacja_PrzypisanieWlaczonychStanowDoTablicy
VAR_INPUT
	eTryb			: B_Baza.E_TrybyPracy;
END_VAR
VAR
	iI				: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	FOR iI := 0 TO STALE.ILOSC_STANOW_PRACY DO
		THIS^.stSITP.arrStanyWlaczoneWTrybie [eTryb][iI]			:= THIS^.stSITP.arrStanyWszystkichTrybow [eTryb][iI].zwrocWlaczony ();
	END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Inicjalizacja_PrzypisanieWlaczonychTrybowDoTablicy" Id="{5899a805-a34c-0d50-316f-e10bf48ff436}" FolderPath="A00_Init\">
      <Declaration><![CDATA[METHOD PRIVATE Inicjalizacja_PrzypisanieWlaczonychTrybowDoTablicy
VAR_INPUT
END_VAR

VAR
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iI := 0 TO STALE.ILOSC_TRYBOW_PRACY DO
	THIS^.stSITP.arrTrybyWlaczone [iI]		:= THIS^.stSITP.arrTryby [iI].zwrocWlaczony ();
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="KonfugurujTrybStartowy" Id="{72e63309-50b5-0b05-287a-f51f59ee4025}" FolderPath="Konfiguracja\">
      <Declaration><![CDATA[(*			
	RAFALOS
	Rafał Osajda		18.09.2025		TC 4024.66
	Metoda właczająca przełączenie trybu na pierwszy tryb po starcie, należy ją wywołac w pierwszym cyklu
*)
METHOD PUBLIC KonfugurujTrybStartowy : BOOL
VAR_INPUT
	eTrybStartowy				: B_Baza.E_TrybyPracy;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	(*	Uruchomienie zmiany trybu na tryb startowy	*)
	
THIS^.stSITP.arrPoleceniaZmianyTrybu [eTrybStartowy].ustawStanRozkazu (bIN	:= TRUE);
THIS^.stSITP.arrPoleceniaZmianyStanu [E_SITP_PolecenieZmianyStanu.Abort].ustawStanRozkazu (bIN	:= TRUE);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ObslugaPracyWStanie" Id="{74b4a7a3-a5e8-0e2a-2ef7-573cfd745f80}" FolderPath="A02_SITP\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.06.2025		TC 4024.66
	Przejście przez każdu PB i wowołanie obsługi pracy w zadanym stanie
*)
METHOD PRIVATE ObslugaPracyWStanie
VAR
	iI									: INT;
	bOperacjaStanuAktywnegoZakonczona	: BOOL;
	bStanAktywny						: bool;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bStanAktywny								:= THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Aborting OR
												THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Clearing OR
												THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Completing OR
												THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Holding OR
												THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Unholding OR
												THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Suspending OR
												THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Unsuspending OR
												THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Starting OR
												THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Stopping OR
												THIS^.stSITP.eStan = B_Baza.E_StanyPracy.Resetting;
bOperacjaStanuAktywnegoZakonczona			:= bStanAktywny;
										
FOR iI := 1 TO TO_INT (THIS^.iIloscPB) DO
	IF (THIS^.stSITP.eStan <> B_Baza.E_StanyPracy.Undefined) THEN
		IF ((bStanAktywny AND NOT THIS^.stSITP.arrwynikZakonczeniaOperacji [iI]) OR NOT bStanAktywny) THEN
			THIS^.stSITP.arrwynikZakonczeniaOperacji [iI]	:= THIS^.stSITP.refarrStany [THIS^.stSITP.eStan].WywolajAkcjePBDlaStanu (iNumerPB	:= iI);
		END_IF
	END_IF
	bOperacjaStanuAktywnegoZakonczona		:= bOperacjaStanuAktywnegoZakonczona AND THIS^.stSITP.arrWynikZakonczeniaOperacji [iI];
END_FOR


(*	Operacja u wszystkich podzespołów bazowych zakońćzona	dla stanow aktywnych*)
IF (bOperacjaStanuAktywnegoZakonczona) THEN
	MEMSET (
		destAddr							:= ADR (THIS^.stSITP.arrwynikZakonczeniaOperacji),
		fillByte							:= 0,
		n									:= SIZEOF (THIS^.stSITP.arrwynikZakonczeniaOperacji)
	);
	
	THIS^.stSITP.bWyjdzZestanuAktywnego		:= TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ObslugaSITP" Id="{a98e7d35-18bf-0c01-0f52-fd607abeafe9}" FolderPath="A02_SITP\">
      <Declaration><![CDATA[METHOD PRIVATE ObslugaSITP : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT THIS^.stSITP.bStanZmiana AND NOT THIS^.stSITP.bTrybZmiana) THEN
	THIS^.stSITPDaneElementu.arrStanyWlaczoneWTrybie						:= THIS^.stSITP.arrStanyWlaczoneWTrybie [THIS^.stSITP.eTryb];
	THIS^.stSITPDaneElementu.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie	:= THIS^.stSITP.arrMozliwoscPrzejsciaPamiedzyTrybamiWStanie [THIS^.stSITP.eStan];
	
	IF (THIS^.TestCzyAktynePolecenieZmianyTrybu ()) THEN
		THIS^.stSITP.bTrybZmiana		:= THIS^.stSITP.arrTryby [THIS^.stSITP.eTryb].ZwrocCzyMoznaWyjscZeStanu ();		(*	jest aktywne polecenie wywołaj dla aktywnego trybu czy jest możliwość przejscia do nowego trybu	*) 
	ELSIF (THIS^.TestCzyAktynePolecenieZmianyStanu () OR THIS^.stSITP.bWyjdzZestanuAktywnego) THEN
		THIS^.stSITP.bStanZmiana		:= THIS^.stSITP.refarrStany [THIS^.stSITP.eStan].ZwrocCzyMoznaWyjscZeStanu ();	(*	jest aktywne polecenie wywołaj dla aktywnego stanu test czy jest możliwa zmana stanu tym pleceniem	*)
		THIS^.stSITP.bWyjdzZestanuAktywnego									:= FALSE;
	ELSE
		(*	Aktualizacja czasu pracy w stanie i trybie	*)
		THIS^.AktualizacjaLicznikowCzasu ();
		(*	Obsluga stanu	*)
		THIS^.ObslugaPracyWStanie ();
		(* Obsługa stanów aktywnych	- z końcówką ING	*)
	//	THIS^.ObslugaStanowAktywnych ();
		(* Obsługa stanów oczekujących *)
	//	THIS^.ObslugaStanowOczekujacych ();
	END_IF
	
ELSIF (THIS^.stSITP.bTrybZmiana) THEN
	THIS^.stSITP.bBylaZmianaTrybu			:= TRUE;	//informacje dla HMI

	THIS^.WylaczSygnalizacjeStanow ();
	(* wyłączenie aktywnego trybu	*)
	THIS^.stSITP.arrTryby [THIS^.stSITP.eTryb].ustawAktywny (bIN	:= FALSE);
	(* wyłączenie aktywnego stanu w poprzednim trybie	*)
	THIS^.stSITP.refarrStany [THIS^.stSITP.eStan].ustawAktywny (bIN	:= FALSE);
	THIS^.stSITP.eTryb						:= THIS^.stSITPDaneElementu.eNowyTryb;
	(* włączenie aktywnego trybu	*)
	THIS^.stSITP.arrTryby [THIS^.stSITP.eTryb].ustawAktywny (bIN	:= TRUE);
	THIS^.stSITP.refarrStany				REF= THIS^.stSITP.arrStanyWszystkichTrybow [THIS^.stSITP.eTryb];
	(* włączenie aktywnego stanu w nowym trybie 		*)
	THIS^.stSITP.refarrStany [THIS^.stSITP.eStan].ustawAktywny (bIN	:= TRUE);
	THIS^.WlaczSygnalizacjeStanow ();
	THIS^.stSITP.bTrybZmiana				:= FALSE;
	
ELSIF (THIS^.stSITP.bStanZmiana) THEN
	THIS^.WylaczSygnalizacjeStanow ();
	THIS^.stSITP.refarrStany [THIS^.stSITP.eStan].ustawAktywny (bIN	:= FALSE);
	THIS^.stSITP.eStan						:= THIS^.stSITPDaneElementu.eNowyStan;
	THIS^.stSITP.refarrStany [THIS^.stSITP.eStan].ustawAktywny (bIN	:= TRUE);
	THIS^.WlaczSygnalizacjeStanow ();
	THIS^.stSITP.bStanZmiana				:= FALSE;
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="PierwszePrzejscie" Id="{ee2b6c2c-71ba-04f6-03fb-4933745a51be}" FolderPath="A01_PierwszePrzejscie\">
      <Declaration><![CDATA[METHOD PUBLIC PierwszePrzejscie : BOOL
VAR_INPUT
END_VAR

VAR
	btmpPP: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[btmpPP			:= THIS^.dodajPB (itfPB			:= THIS^);

//VisuElems.CURRENTLANGUAGE				:= THIS^.fbLokalizacja.zwrocAktualnyKod ();

IF (THIS^.stReceptury.fbReceptury.zwrocIloscSzablonow () = 0) THEN
	THIS^.stReceptury.bUtworzSzablony	:= TRUE;
END_IF

THIS^.bPierwszePrzejscie			:= btmpPP AND TRUE;				//ustawienie falgi wewnętrznej by można ją było zwrócić 
PierwszePrzejscie					:= THIS^.bPierwszePrzejscie;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowiarzStSafety" Id="{1f32a082-a703-0821-1696-abdf6bc7c959}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC PowiarzStSafety : BOOL
VAR_INPUT
	stSafety					: REFERENCE TO ST_Safety;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.refstSafety											REF= stSafety;

THIS^.stSITPDaneElementu.itfGrzybCh1						:= THIS^.refstSafety.fbGrzybCh1a;
THIS^.stSITPDaneElementu.itfGrzybCh2						:= THIS^.refstSafety.fbGrzybCh1b;
THIS^.stSITPDaneElementu.itfSS1								:= THIS^.refstSafety.fbSS1;
THIS^.stSITPDaneElementu.itfSTO								:= THIS^.refstSafety.fbSTO;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowiarzTworzenieSzablonu" Id="{c9f13ce6-cdfa-001d-0779-7c9bc0f46550}" FolderPath="Szablony\">
      <Declaration><![CDATA[METHOD PUBLIC PowiarzTworzenieSzablonu : BOOL
VAR_INPUT
	iNumerSzablonu						: INT;
	itfNowySzablon						: ITF_UtworzSzablonReceptury;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stReceptury.arritfTworzenieReceptury [iNumerSzablonu]	:= itfNowySzablon;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowiazJezyk" Id="{d95a00e0-bd11-03cd-21f0-d9ce374f0cca}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC PowiazJezyk : BOOL
VAR_INPUT
	fbLokalizacja				: ITF_Lokalizacja;
END_VAR

VAR
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.PowiazJezyk (fbLokalizacja	:= fbLokalizacja);

FOR iI := 0 TO STALE.ILOSC_TRYBOW_PRACY DO
	THIS^.stSITP.stStany [iI].fbUndefined.PowiazJezyk (fbLokalizacja	:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbAborting.PowiazJezyk (fbLokalizacja		:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbAborted.PowiazJezyk (fbLokalizacja		:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbClearing.PowiazJezyk (fbLokalizacja		:= THIS^.fbLokalizacja);	
	THIS^.stSITP.stStany [iI].fbStopping.PowiazJezyk (fbLokalizacja		:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbStopped.PowiazJezyk (fbLokalizacja		:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbResetting.PowiazJezyk (fbLokalizacja	:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbIdle.PowiazJezyk (fbLokalizacja			:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbStarting.PowiazJezyk (fbLokalizacja		:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbExecute.PowiazJezyk (fbLokalizacja		:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbSuspending.PowiazJezyk (fbLokalizacja	:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbSuspended.PowiazJezyk (fbLokalizacja	:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbUnsuspending.PowiazJezyk (fbLokalizacja	:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbHolding.PowiazJezyk (fbLokalizacja		:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbHeld.PowiazJezyk (fbLokalizacja			:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbUnholding.PowiazJezyk (fbLokalizacja	:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbCompleting.PowiazJezyk  (fbLokalizacja	:= THIS^.fbLokalizacja);
	THIS^.stSITP.stStany [iI].fbComplete.PowiazJezyk (fbLokalizacja		:= THIS^.fbLokalizacja);

END_FOR

THIS^.stSITP.stTryby.fbNiedozwolony.PowiazJezyk (fbLokalizacja 			:= THIS^.fbLokalizacja);
THIS^.stSITP.stTryby.fbProdukcja.PowiazJezyk (fbLokalizacja 			:= THIS^.fbLokalizacja);
THIS^.stSITP.stTryby.fbKonserwacja.PowiazJezyk (fbLokalizacja 			:= THIS^.fbLokalizacja);
THIS^.stSITP.stTryby.fbReczny.PowiazJezyk (fbLokalizacja 				:= THIS^.fbLokalizacja);
THIS^.stSITP.stTryby.fbMycie.PowiazJezyk (fbLokalizacja 				:= THIS^.fbLokalizacja);
THIS^.stSITP.stTryby.fbDiagnostyka.PowiazJezyk (fbLokalizacja 			:= THIS^.fbLokalizacja);
THIS^.stSITP.stTryby.fbUzytkownika2.PowiazJezyk (fbLokalizacja 			:= THIS^.fbLokalizacja);
THIS^.stSITP.stTryby.fbUzytkownika3.PowiazJezyk (fbLokalizacja 			:= THIS^.fbLokalizacja);
THIS^.stSITP.stTryby.fbUzytkownika4.PowiazJezyk (fbLokalizacja 			:= THIS^.fbLokalizacja);
THIS^.stSITP.stTryby.fbUzytkownika5.PowiazJezyk (fbLokalizacja 			:= THIS^.fbLokalizacja);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestCzyAktynePolecenieZmianyStanu" Id="{4afee66d-aa1c-0dc8-2cc7-243b397907cb}" FolderPath="A02_SITP\">
      <Declaration><![CDATA[METHOD PRIVATE TestCzyAktynePolecenieZmianyStanu : BOOL
VAR_INPUT
END_VAR

VAR
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iI := 0 TO STALE.ILOSC_POLECEN_ZMIANY_STANU DO
	IF (THIS^.stSITP.arrPoleceniaZmianyStanu [iI].zwrocStanRozkazu ()) THEN
		THIS^.stSITPDaneElementu.ePolecenieZmianyStanu	:= THIS^.stSITP.arrPoleceniaZmianyStanu[iI].zwrocRodzajPolecenia();
		TestCzyAktynePolecenieZmianyStanu		:= TRUE;
		EXIT;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestCzyAktynePolecenieZmianyTrybu" Id="{89604a87-b288-0f6c-0a5c-f2d86246e916}" FolderPath="A02_SITP\">
      <Declaration><![CDATA[METHOD PRIVATE TestCzyAktynePolecenieZmianyTrybu : BOOL
VAR_INPUT
END_VAR

VAR
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iI := 0 TO STALE.ILOSC_POLECEN_ZMIANY_TRYBU DO
	IF (THIS^.stSITP.arrPoleceniaZmianyTrybu [iI].zwrocStanRozkazu ()) THEN
		THIS^.stSITPDaneElementu.ePolecenieZmianyTrybu	:= THIS^.stSITP.arrPoleceniaZmianyTrybu[iI].zwrocRodzajPolecenia();
		TestCzyAktynePolecenieZmianyTrybu		:= TRUE;
		EXIT;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrwaZmianaStanu" Id="{b60fa26c-cd07-09ae-17d1-70bbc353cc53}" FolderPath="ITF_SITP\">
      <Declaration><![CDATA[METHOD PUBLIC TrwaZmianaStanu : BOOL
VAR_INPUT

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TrwaZmianaStanu				:= THIS^.stSITP.bStanZmiana;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrwaZmianaTrybu" Id="{b751ddd9-e102-0b62-3ab9-7fd26394ea34}" FolderPath="ITF_SITP\">
      <Declaration><![CDATA[METHOD PUBLIC TrwaZmianaTrybu : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TrwaZmianaTrybu			:= THIS^.stSITP.bTrybZmiana;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UtworzSzablon" Id="{8e9c6f01-f20f-0e9a-1511-e704f7f553f6}" FolderPath="Szablony\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		30.04.2025		TC 4024.66
	utworzenie szablonów receptur, w programie maszyny przeciążyć metodę i dodać odpowiednią ilość szablonów.
	Wywołanie metody powoduje wyczyszczenie dotychczasowych szablonów i receptur a następnie utworzenie nowych szablonów i 
	stworezenie pierwszej receptury na bazie pierwszego szablonu
*)
METHOD PROTECTED UtworzSzablon
VAR_INPUT
END_VAR

VAR
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stReceptury.fbReceptury.WyczyscSzablony ();
THIS^.stReceptury.fbReceptury.WyczyscReceptury ();

FOR iI := 1 TO TO_INT (B_Baza.STALE.MAX_ILOSC_SZABLONOW) DO
	IF (THIS^.stReceptury.arritfTworzenieReceptury [iI] <> 0) THEN
		THIS^.stReceptury.arritfTworzenieReceptury [iI].Utworz (stReceptury		:= THIS^.stReceptury);
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="WlaczSygnalizacjeStanow" Id="{6c4c7331-2a54-0b0d-2be0-da1a0f2c60ff}" FolderPath="A02_SITP\">
      <Declaration><![CDATA[METHOD PRIVATE WlaczSygnalizacjeStanow
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//this^.stSITP.arrSygnalizacjaStanu
THIS^.stSITP.arrSygnalizacjaStanu [THIS^.stSITP.eStan].UstawPrace ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="WylaczSygnalizacjeStanow" Id="{1661c86b-ff65-0d2a-0c77-335b7ace9d0e}" FolderPath="A02_SITP\">
      <Declaration><![CDATA[METHOD PRIVATE WylaczSygnalizacjeStanow
VAR_INPUT
END_VAR

VAR
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//wylacz wszytkie lampki 
THIS^.stSITP.arrSygnalizacjaStanu [THIS^.stSITP.eStan].WylaczWszystkie ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZgloszeniaDefinicja" Id="{6d31bdae-2794-0a1d-1b37-405fdaf6f58f}" FolderPath="Zgloszenia\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		04.04.2025		TC 4024.66
	Metodaw wywoływana w pierwszym cyklu programu dodająca do tablicy zgłoszeń definicje zgłoszeń
*)
METHOD PUBLIC ZgloszeniaDefinicja

]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ZgloszeniaDefinicja ();
//1
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst := "Nie można wyjść tym poleceniem z tego stanu");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst := "");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst := "");
THIS^.ZgloszenieDodaj (
	eRodzajZdarzenia		:= B_Baza.E_Zgloszenia_Rodzaj.WIADOMOSC,
	bIgnorujPowtorzenia		:= TRUE,
	bWymagaZatwierdzenia	:= FALSE,
	stOpis					:= THIS^.ZwrocEtykiete ()
);
//2
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst := "Stan docelowy jest wyłączony");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst := "");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst := "");
THIS^.ZgloszenieDodaj (
	eRodzajZdarzenia		:= B_Baza.E_Zgloszenia_Rodzaj.WIADOMOSC,
	bIgnorujPowtorzenia		:= TRUE,
	bWymagaZatwierdzenia	:= FALSE,
	stOpis					:= THIS^.ZwrocEtykiete ()
);
//3
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst := "Brak polecenia opuszczenia trybu aktywnego");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst := "");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst := "");
THIS^.ZgloszenieDodaj (
	eRodzajZdarzenia		:= B_Baza.E_Zgloszenia_Rodzaj.WIADOMOSC,
	bIgnorujPowtorzenia		:= TRUE,
	bWymagaZatwierdzenia	:= FALSE,
	stOpis					:= THIS^.ZwrocEtykiete ()
);
//4
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst := "Wyłącznik awaryjny wciśnięty");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst := "");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst := "");
THIS^.ZgloszenieDodaj (
	eRodzajZdarzenia		:= B_Baza.E_Zgloszenia_Rodzaj.WIADOMOSC,
	bIgnorujPowtorzenia		:= TRUE,
	bWymagaZatwierdzenia	:= FALSE,
	stOpis					:= THIS^.ZwrocEtykiete ()
);
//5
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst := "W aktualnym stanie aktualnego trybu niemożna zmienić trybu");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst := "");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst := "");
THIS^.ZgloszenieDodaj (
	eRodzajZdarzenia		:= B_Baza.E_Zgloszenia_Rodzaj.WIADOMOSC,
	bIgnorujPowtorzenia		:= TRUE,
	bWymagaZatwierdzenia	:= FALSE,
	stOpis					:= THIS^.ZwrocEtykiete ()
);
//6
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst := "W trybie docelowym zmiana trybu niemożliwa");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst := "");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst := "");
THIS^.ZgloszenieDodaj (
	eRodzajZdarzenia		:= B_Baza.E_Zgloszenia_Rodzaj.WIADOMOSC,
	bIgnorujPowtorzenia		:= TRUE,
	bWymagaZatwierdzenia	:= FALSE,
	stOpis					:= THIS^.ZwrocEtykiete ()
);
//7
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.pl, wsTekst := "Tryb docelowy jest wyłączony");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.en, wsTekst := "");
THIS^.PrzypiszTekst (eJezyk := B_Baza.E_Jezyki.de, wsTekst := "");
THIS^.ZgloszenieDodaj (
	eRodzajZdarzenia		:= B_Baza.E_Zgloszenia_Rodzaj.WIADOMOSC,
	bIgnorujPowtorzenia		:= TRUE,
	bWymagaZatwierdzenia	:= FALSE,
	stOpis					:= THIS^.ZwrocEtykiete ()
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="zwrocIloscPB" Id="{b07c3be2-1177-06d1-2f35-7eb7dd85a1fa}">
      <Declaration><![CDATA[METHOD PUBLIC zwrocIloscPB : INT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[zwrocIloscPB			:= THIS^.iIloscPB;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZwrocITFCzas" Id="{e1e640de-dbfc-0817-1744-6f222bf923b9}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC ZwrocITFCzas : B_Baza.ITF_Czas
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ZwrocITFCzas		:= THIS^.fbCzas;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZwrocITFLoger" Id="{81d6312d-355d-01d8-176e-0878ee731526}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC ZwrocITFLoger : ITF_Loger_HMI_Lacznik
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZwrocITFLokalizacja" Id="{a188b913-281c-0b1d-3fcf-0497a884837b}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC ZwrocITFLokalizacja : B_Baza.ITF_Lokalizacja
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ZwrocITFLokalizacja		:= THIS^.itfLokalizacja;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZwrocPierwszePrzejscie" Id="{241f55fd-ce50-0207-37ac-1c2d8244c797}">
      <Declaration><![CDATA[METHOD PUBLIC ZwrocPierwszePrzejscie : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ZwrocPierwszePrzejscie		:= THIS^.bPierwszePrzejscie;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="zwrocStan" Id="{2914b52d-95d0-0e73-32b9-a80a6dab004d}" FolderPath="ITF_SITP\">
      <Declaration><![CDATA[METHOD PUBLIC zwrocStan : B_Baza.E_StanyPracy
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[zwrocStan			:= THIS^.stSITP.eStan;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="zwrocTryb" Id="{058ecacd-9aa8-009e-1635-a4d07c9bd23f}" FolderPath="ITF_SITP\">
      <Declaration><![CDATA[METHOD PUBLIC zwrocTryb : B_Baza.E_TrybyPracy
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[zwrocTryb			:= THIS^.stSITP.eTryb;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>