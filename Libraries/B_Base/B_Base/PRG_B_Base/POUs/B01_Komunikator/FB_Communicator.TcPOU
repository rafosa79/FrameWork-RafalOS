<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Communicator" Id="{1b33e1cc-6ea2-087e-1241-9e727acff4fb}" SpecialFunc="None">
    <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		30.07.2025		TC 4024.66
	Głowny fb do kumunikacji pomiędzy fb frameworka
*)
FUNCTION_BLOCK FB_Communicator IMPLEMENTS ITF_Communicator
VAR
	arrData					: ARRAY [1..GVL_BaseConstans.MAX_NUMBER_OF_MASSAGES] OF ST_CommunicatorData;
	iNumberOfData			: INT;
	arrStack				: ARRAY [1..GVL_BaseConstans.MAX_NUMBER_OF_MASSAGES_ON_STACK] OF ST_CommunicatorStack;
	iNumberOfitemsInStack	: INT;		//ilość elementów w kolejce
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddMessage" Id="{8318a4ce-e51e-018c-1ad9-9fe355e32429}">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		30.07.2025		TC 4024.66
	Dodaje komunikat który będzie wysyłany w systemie. Np. Gotowy wartość TRUE
*)
METHOD PUBLIC AddMessage : INT
VAR_INPUT
	sText				: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.iNumberOfData + 1 <= GVL_BaseConstans.MAX_NUMBER_OF_MASSAGES) THEN
	THIS^.iNumberOfData		:= THIS^.iNumberOfData + 1;
	THIS^.arrData [THIS^.iNumberOfData].stMessage.sText		:= sText;
	AddMessage			:= THIS^.iNumberOfData;
ELSE
	AddMessage			:= 0;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddRecipientToMessage" Id="{67118a66-7b3d-04ca-142a-7c5a2550daba}">
      <Declaration><![CDATA[METHOD PUBLIC AddRecipientToMessage : BOOL
VAR_INPUT
	iMessageNumber				: INT;
	itfRecipient				: ITF_MessengerRecipient;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.arrData [iMessageNumber].iNumberOfRecipient + 1 <= GVL_BaseConstans.MAX_NUMBER_OF_CLIENTS) THEN
	THIS^.arrData [iMessageNumber].iNumberOfRecipient			:= THIS^.arrData [iMessageNumber].iNumberOfRecipient + 1;
	THIS^.arrData [iMessageNumber].arritfRecipient [THIS^.arrData [iMessageNumber].iNumberOfRecipient]	:= itfRecipient;
	AddRecipientToMessage									:= TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddSenderToMessage" Id="{e88c45e9-b147-0fbf-0f67-61cf57b8ef93}">
      <Declaration><![CDATA[METHOD PUBLIC AddSenderToMessage : BOOL
VAR_INPUT
	iMessageNumber		: INT;
	itfSender			: ITF_MessengerSender;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.arrData [iMessageNumber].itfSender	:= itfSender;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIsMeesageExist" Id="{a96b9b1f-cdf2-052c-22ae-bb31e5798abb}">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		31.07.2025		TC 4024.66
	
*)
METHOD PRIVATE GetIsMeesageExist : BOOL
VAR_INPUT
	sText			: STRING;
END_VAR
VAR_OUTPUT
	iIndex			: INT;
END_VAR
VAR
	iI				: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iI := 1 TO THIS^.iNumberOfData DO
	IF (sText = THIS^.arrData [iI].stMessage.sText) THEN
		iIndex							:= iI;
		GetIsMeesageExist		:= TRUE;
		RETURN;
	END_IF
END_FOR
GetIsMeesageExist				:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIsRecipientAuthorized" Id="{e94f808a-e5d5-0cb5-0e0f-6c857b4bd799}">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		31.07.2025		TC 4024.66
	Sprawdza czy ten kto nadaje komunikat jest do tego uprawniony
*)
METHOD PRIVATE GetIsRecipientAuthorized : BOOL
VAR_INPUT
	iIndex		: INT;
	itfRecipient	: ITF_MessengerRecipient;
END_VAR
VAR
	iI			: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iI := 1 TO THIS^.arrData [iIndex].iNumberOfRecipient DO
	IF (THIS^.arrData [iIndex].arritfRecipient [iI] = itfRecipient) THEN
		GetIsRecipientAuthorized			:= TRUE;
		RETURN;
	END_IF
END_FOR
GetIsRecipientAuthorized			:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIsSenderAuthorized" Id="{f5007911-c0a0-0e0e-092b-165e92d9bb54}">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		31.07.2025		TC 4024.66
	Sprawdza czy ten kto nadaje komunikat jest do tego uprawniony
*)
METHOD PRIVATE GetIsSenderAuthorized : BOOL
VAR_INPUT
	iIndex		: INT;
	itfSender	: ITF_MessengerSender;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.arrData [iIndex].itfSender = itfSender) THEN
	GetIsSenderAuthorized			:= TRUE;
ELSE
	GetIsSenderAuthorized			:= FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReceiveData_BOOL" Id="{7aef4152-a5e6-0135-0aeb-909ceb511126}">
      <Declaration><![CDATA[METHOD PUBLIC ReceiveData_BOOL : BOOL
VAR_INPUT
	sText		: STRING;
	itfRecipient	: ITF_MessengerRecipient;
END_VAR
VAR_OUTPUT
	bValue	: BOOL;	
END_VAR
VAR
	iIndex: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.GetIsMeesageExist (sText := sText, iIndex => iIndex)) THEN
	IF (THIS^.GetIsRecipientAuthorized (iIndex := iIndex, itfRecipient := itfRecipient)) THEN
		bValue				:= THIS^.arrData [iIndex].stMessage.bValue;
		ReceiveData_BOOL			:= TRUE;
		RETURN;
	END_IF
END_IF
ReceiveData_BOOL			:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReceiveData_REAL" Id="{a84b4166-5348-0cee-06f3-35a72c5e990e}">
      <Declaration><![CDATA[METHOD PUBLIC ReceiveData_REAL : BOOL
VAR_INPUT
	sText		: STRING;
	itfRecipient	: ITF_MessengerRecipient;
END_VAR
VAR_OUTPUT
	rValue	: REAL;	
END_VAR
VAR
	iIndex: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.GetIsMeesageExist (sText := sText, iIndex => iIndex)) THEN
	IF (THIS^.GetIsRecipientAuthorized (iIndex := iIndex, itfRecipient := itfRecipient)) THEN
		rValue				:= THIS^.arrData [iIndex].stMessage.rValue;
		ReceiveData_REAL			:= TRUE;
		RETURN;
	END_IF
END_IF
ReceiveData_REAL			:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReceiveDataConfirm" Id="{2c5ae29b-50da-0da6-0045-cd8f7de03a41}">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		30.07.2025		TC 4024.66
	Wysyła potwierdzenie że odebrał dane
*)
METHOD PUBLIC ReceiveDataConfirm : BOOL
VAR_INPUT
	sText				: STRING;
	itfRecipient			: ITF_MessengerRecipient;
END_VAR
VAR
	iIndex				: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.GetIsMeesageExist (sText := sText, iIndex => iIndex)) THEN
	IF (THIS^.GetIsRecipientAuthorized (iIndex := iIndex, itfRecipient := itfRecipient)) THEN
		THIS^.iNumberOfitemsInStack		:= THIS^.iNumberOfitemsInStack + 1;
		THIS^.arrStack [THIS^.iNumberOfitemsInStack].stMessage.sText	:= sText;
		THIS^.arrStack [THIS^.iNumberOfitemsInStack].bConfirmation		:= TRUE;
		THIS^.arrStack [THIS^.iNumberOfitemsInStack].itfRecipient			:= itfRecipient;
		ReceiveDataConfirm					:= TRUE;
		RETURN;
	END_IF
END_IF
ReceiveDataConfirm					:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendData_BOOL" Id="{f7a4e4cc-4855-064a-383b-9fb358675d4a}">
      <Declaration><![CDATA[METHOD SendData_BOOL : BOOL
VAR_INPUT
	sText		: STRING;
	itfSender	: ITF_MessengerSender;
END_VAR
VAR
	iIndex: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.GetIsMeesageExist (sText := sText, iIndex => iIndex)) THEN
	IF (THIS^.GetIsSenderAuthorized (iIndex := iIndex, itfSender := itfSender)) THEN
		THIS^.iNumberOfitemsInStack	:= THIS^.iNumberOfitemsInStack + 1;
		THIS^.arrStack [THIS^.iNumberOfitemsInStack].stMessage.sText		:= sText;
		THIS^.arrStack [THIS^.iNumberOfitemsInStack].stMessage.bValue		:= TRUE;
		THIS^.arrStack [THIS^.iNumberOfitemsInStack].bSent				:= TRUE;
		SendData_BOOL				:= TRUE;
		RETURN;
	END_IF
END_IF
SendData_BOOL				:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendData_REAL" Id="{eb8afa73-7af4-0b03-2118-dceb062b6fd4}">
      <Declaration><![CDATA[METHOD SendData_REAL : BOOL
VAR_INPUT
	sText		: STRING;
	rValue		: REAL;
	itfSender	: ITF_MessengerSender;
END_VAR

VAR
	iIndex: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.GetIsMeesageExist (sText := sText, iIndex => iIndex)) THEN
	IF (THIS^.GetIsSenderAuthorized (iIndex := iIndex, itfSender := itfSender)) THEN
		THIS^.iNumberOfitemsInStack	:= THIS^.iNumberOfitemsInStack + 1;
		THIS^.arrStack [THIS^.iNumberOfitemsInStack].stMessage.sText		:= sText;
		THIS^.arrStack [THIS^.iNumberOfitemsInStack].stMessage.rValue		:= rValue;
		THIS^.arrStack [THIS^.iNumberOfitemsInStack].bSent				:= TRUE;
		SendData_REAL				:= TRUE;
		RETURN;
	END_IF
END_IF
SendData_REAL				:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StackSupport" Id="{7ea162a9-0708-0e88-375c-ab06d8e44216}">
      <Declaration><![CDATA[METHOD PUBLIC StackSupport
VAR
	iI			: INT;
	iJ			: INT;
	iRecipient	: INT;
	btmpTest	: bool;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (iNumberOfitemsInStack > 0) THEN
	FOR iI := 1 TO iNumberOfitemsInStack DO
		IF (THIS^.GetIsMeesageExist (sText := THIS^.arrStack [iI].stMessage.sText, iIndex => iJ)) THEN
			// Nadawanie wiadomosci ustaw odpowiednia wartosc
			IF (THIS^.arrStack [iI].bSent) THEN
				THIS^.arrData [iJ].stMessage.bValue		:= THIS^.arrStack [iI].stMessage.bValue;
				THIS^.arrData [iJ].stMessage.rValue		:= THIS^.arrStack [iI].stMessage.rValue;
				THIS^.arrData [iJ].stMessage.bToPickUp	:= TRUE;
				THIS^.arrData [iJ].iNumberOfConfirmations		:= THIS^.arrData [iJ].iNumberOfRecipient;
			// potwierdzenie odebrania wiadomości wyczyść wiadomość 
			ELSIF (THIS^.arrStack [iI].bConfirmation) THEN
				IF (THIS^.arrData [iJ].iNumberOfRecipient = 1) THEN
					THIS^.arrData [iJ].iNumberOfConfirmations	:= THIS^.arrData [iJ].iNumberOfConfirmations - 1;
					btmpTest		:= TRUE;
				ELSE
					btmpTest		:= TRUE;
					FOR iRecipient := 1 TO THIS^.arrData [iJ].iNumberOfRecipient DO
						IF (THIS^.arrStack [iI].itfRecipient = THIS^.arrData [iJ].arritfRecipient [iRecipient]) THEN
							THIS^.arrData [iJ].arrConfirmations [iRecipient]	:= TRUE;
							THIS^.arrData [iJ].iNumberOfConfirmations			:= THIS^.arrData [iJ].iNumberOfConfirmations - 1;
						END_IF
						btmpTest	:= btmpTest AND THIS^.arrData [iJ].arrConfirmations [iRecipient];
					END_FOR
				END_IF
				IF (btmpTest) THEN
					THIS^.arrData [iJ].stMessage.bToPickUp	:= FALSE;
					THIS^.arrData [iJ].stMessage.bValue		:= FALSE;
					THIS^.arrData [iJ].stMessage.rValue		:= 0;
				END_IF
			END_IF
			EXIT;
		END_IF
	END_FOR
	//wyczyszczenie kolejki
	Tc2_System.MEMSET (
		destAddr			:= ADR (THIS^.arrStack),
		fillByte			:= 0,
		n					:= SIZEOF (THIS^.arrStack)
	);
	THIS^.iNumberOfitemsInStack	:= 0;
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>