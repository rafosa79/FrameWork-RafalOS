<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_BaseControlElement" Id="{4411e8b6-2e2c-0151-1419-8a5f32f7c37c}" SpecialFunc="None">
    <Declaration><![CDATA[(*			
	RAFALOS
	Rafał Osajda		19.09.2025		TC 4024.66
	Rodzic dla wszystkich elementów wykonawczych
*)
FUNCTION_BLOCK FB_BaseControlElement EXTENDS FB_BaseComponent IMPLEMENTS ITF_BaseControlElement, ITF_BaseControlElement_HMI_Connector
VAR
	arrComponent			: ARRAY  [1..GVL_BaseConstans.MAX_ITEM_PER_ELEMENT] OF ITF_BaseComponent;
	uiNumberOfComponents	: UINT;
(*	Zasilanie	*)
	itfSS1					: ITF_BaseFlagGet;
	itfSTO					: ITF_BaseFlagGet;
	stPower					: ST_BaseControlElement_Power;
(*	Bazowanie	*)
	stHoming				: ST_BaseControlElement_Homing;
(*	Flagi główne elementów	*)
	bPosition0				: BOOL := TRUE;	//jak nie potrzebna to zostawić na true w przeciwnym przypadku przypisać odpowiednią logikę
	bDoNothing				: BOOL := TRUE;	//jak nie potrzebna to zostawić na true w przeciwnym przypadku przypisać odpowiednią logikę
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Bazowanie" Id="{b37a828b-2043-04f0-01f3-c3e8d6ea6273}" />
    <Folder Name="Events" Id="{1dd56da8-fa40-0d20-065c-a56138eede25}" />
    <Folder Name="ID" Id="{4718b15a-f934-0f59-1b79-1caa8a3a3eb5}" />
    <Folder Name="ITF_BaseComponent" Id="{70fd3cae-e340-0ee9-34eb-dfafcec41a5f}" />
    <Folder Name="ITF_BaseControlElement" Id="{dc648045-f66b-0ac7-1355-3cd4e4efb21e}" />
    <Folder Name="ITF_DecoratedElement" Id="{8b9f0679-be65-07db-3642-fa8761f4d30d}" />
    <Folder Name="Reset" Id="{24cc0c48-ecb6-057d-16ae-5d473fe279a3}" />
    <Folder Name="WiazanieZmiennych" Id="{b467be5a-6d2a-0ee1-246f-4160ba6824ae}" />
    <Folder Name="Zasilanie" Id="{c277cffb-ced9-0402-3821-c75c33def767}" />
    <Method Name="AddComponent" Id="{b669ca95-b30c-0759-193e-b3e939cb13c5}">
      <Declaration><![CDATA[METHOD PROTECTED AddComponent : BOOL
VAR_INPUT
	itfComponent				: ITF_BaseComponent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (THIS^.uiNumberOfComponents + 1 <= GVL_BaseConstans.MAX_ITEM_PER_ELEMENT) THEN
	THIS^.uiNumberOfComponents		:= THIS^.uiNumberOfComponents + 1;
	THIS^.arrComponent [THIS^.uiNumberOfComponents]	:= itfComponent;
	AddComponent				:= TRUE;
ELSE
	;//zwrocenie zbyt dużo komponentow
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="EventsDefinition" Id="{c334dad3-9bce-0917-045f-8a0401f150c4}" FolderPath="Events\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		24.03.2025		TC 4024.66
	Definicja nowego zgłoszenia
*)
METHOD PUBLIC EventsDefinition : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.EventsDefinition ();

THIS^.SetText (eLocation := E_BaseLocation.pl, wsDescription	:= "Błąd uruchomienia zasilania - brak zgody od safety - BRAK SS1");
THIS^.SetText (eLocation := E_BaseLocation.en, wsDescription	:= "");
THIS^.SetText (eLocation := E_BaseLocation.de, wsDescription	:= "");
THIS^.AddEvent (
	bIgnoreRepetitions			:= TRUE,
	eEventCategory				:= E_BaseEvents_Category.Error,
	bConfirm					:= FALSE,
	stDescription				:= THIS^.GetTexts ()
);
THIS^.SetText (eLocation := E_BaseLocation.pl, wsDescription	:= "Błąd uruchomienia zasilania - brak zgody od safety - BRAK STO");
THIS^.SetText (eLocation := E_BaseLocation.en, wsDescription	:= "");
THIS^.SetText (eLocation := E_BaseLocation.de, wsDescription	:= "");
THIS^.AddEvent (
	bIgnoreRepetitions			:= TRUE,
	eEventCategory				:= E_BaseEvents_Category.Error,
	bConfirm					:= FALSE,
	stDescription				:= THIS^.GetTexts ()
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteEveryCycle_Error" Id="{c53db952-8dc4-0d2b-12ad-d90bb93fe6ad}" FolderPath="ITF_BaseComponent\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.03.2025		TC 4024.66
	Obsluga bledow sprawdzanie czy jakis blad sie nei pojawil i ustawienie stanu lub wylaczenie
*)
METHOD PUBLIC ExecuteEveryCycle_Error
VAR
	iI				: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ExecuteEveryCycle_Error ();

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO
	THIS^.arrComponent [iI].ExecuteEveryCycle_Error ();
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteEveryCycle_Operation" Id="{2b392690-7f99-033f-26aa-9690fa663a58}" FolderPath="ITF_BaseComponent\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.03.2025		TC 4024.66
	Wywolanie co cykl operacji 
*)
METHOD PUBLIC ExecuteEveryCycle_Operation
VAR
	iI			: INT;
	bError		: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ExecuteEveryCycle_Operation ();

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO
	THIS^.arrComponent [iI].ExecuteEveryCycle_Operation ();
END_FOR


(* 	Zasilanie	*)
IF (THIS^.stPower.cmdTurnOn.OperationExecute ()) THEN
	bError				:= FALSE;
	IF (NOT THIS^.itfSS1.GetFlag ()) THEN
		//blad 
		THIS^.EventSetActive (iNumber := 1);
		bError			:= TRUE;
	END_IF
	IF (NOT THIS^.itfSTO.GetFlag ()) THEN
		//blad
		THIS^.EventSetActive (iNumber := 2);
		bError			:= TRUE;
	END_IF
	IF (NOT bError) THEN
		THIS^.stPower.cmdTurnOn.Operation (bIN		:= THIS^.PowerOnCycle ());
		IF (THIS^.EventIsActive (iNumber := 1)) THEN
			THIS^.EventSetInactive (iNumber := 1);
		END_IF
		IF (THIS^.EventIsActive (iNumber := 2)) THEN
			THIS^.EventSetInactive (iNumber := 2);
		END_IF
	ELSE
		THIS^.stPower.cmdTurnOn.Abort ();
	END_IF
END_IF
IF (THIS^.stPower.cmdTurnOff.OperationExecute ()) THEN
	THIS^.stPower.cmdTurnOff.Operation (bIN	:= THIS^.PowerOffCycle ());
END_IF
(*	Bazowanie	*)
IF (THIS^.stHoming.cmdExecute.OperationExecute ()) THEN
	THIS^.stHoming.cmdExecute.Operation (bIN	:= THIS^.HomingCycleInternal ());
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteEveryCycle_Status" Id="{ec9006a7-246a-0b2b-0a91-f4d80259e847}" FolderPath="ITF_BaseComponent\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.03.2025		TC 4024.66
	Aktualizacja flag 
*)
METHOD PUBLIC ExecuteEveryCycle_Status
VAR
	iI				: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ExecuteEveryCycle_Status ();

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO
	THIS^.arrComponent [iI].ExecuteEveryCycle_Status ();
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteEveryCycle_Test" Id="{0e170bd0-8bb2-0c38-0c54-35b280a40246}" FolderPath="ITF_BaseComponent\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.03.2025		TC 4024.66
	Testowanie czy nei pojawil sie jakis rozkaz i uruchomienie odpowiednich operacji
*)
METHOD PUBLIC ExecuteEveryCycle_Test
VAR
	iI				: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ExecuteEveryCycle_Test ();

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO
	THIS^.arrComponent [iI].ExecuteEveryCycle_Test ();
END_FOR

THIS^.stPower.cmdTurnOn.Test ();
THIS^.stPower.cmdTurnOff.Test ();

IF (THIS^.stPower.bStatus) THEN
	THIS^.ExecuteEveryCycle_TestWithPower ();
ELSE
	THIS^.ExecuteEveryCycle_TestWithoutPower ();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteEveryCycle_TestWithoutPower" Id="{de69c8f0-7980-0c93-0e3d-f3f3e3fa8b51}" FolderPath="ITF_BaseComponent\">
      <Declaration><![CDATA[METHOD PROTECTED ExecuteEveryCycle_TestWithoutPower
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stHoming.cmdExecute.Abort ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteEveryCycle_TestWithPower" Id="{8cfe3306-9675-090f-2cce-fa81e160e685}" FolderPath="ITF_BaseComponent\">
      <Declaration><![CDATA[METHOD PROTECTED ExecuteEveryCycle_TestWithPower
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stHoming.cmdExecute.Test ();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{7b78c27a-7119-0af8-2842-5faf4638ec35}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stIdentifier.eType			:= E_BaseElementType.eControl;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FirstCycle" Id="{33027043-dafe-0ff6-0703-6840d7d72448}" FolderPath="ITF_BaseComponent\">
      <Declaration><![CDATA[METHOD PUBLIC FirstCycle : BOOL
VAR_INPUT
END_VAR
VAR
	bResult			: bool;
	iI				: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bResult				:= SUPER^.FirstCycle ();

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO
	bResult			:= bResult AND THIS^.arrComponent [iI].FirstCycle ();
END_FOR

FirstCycle			:= bResult;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetITFControlElement" Id="{fddecf06-8fdb-0ada-3a84-637827f5eb8a}" FolderPath="ITF_DecoratedElement\">
      <Declaration><![CDATA[METHOD GetITFControlElement : ITF_BaseControlElement
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetITFControlElement	:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetITFGroupElement" Id="{f5cdbdc1-92b3-09ca-3d33-c99c0526bc5b}" FolderPath="ITF_DecoratedElement\">
      <Declaration><![CDATA[METHOD GetITFGroupElement : ITF_BaseGroupElement
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetITFGroupElement	:= null;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetITFTopElement" Id="{c992b315-ae26-0fe0-1c32-9136b48d7ed5}" FolderPath="ITF_DecoratedElement\">
      <Declaration><![CDATA[METHOD GetITFTopElement : ITF_BaseTopElement
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetITFTopElement		:= null;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomingCycle" Id="{52f3f79e-960c-0de7-1d3a-68eab36989b0}" FolderPath="Bazowanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.05.2025		TC 4024.66
	Metoda bazowania kontrektnego elementu 
*)
METHOD PROTECTED HomingCycle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[HomingCycle					:= FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomingCycleInternal" Id="{ffc44757-f6c2-07ad-003f-c33ae386e867}" FolderPath="Bazowanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.05.2025		TC 4024.66
	Metoda główna bazowania wywołuje metode przeciążaną Bazowanie_Cykl dziecka
*)
METHOD PRIVATE HomingCycleInternal : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE THIS^.stHoming.cmdExecute.GetStep () OF
0	:
	IF (THIS^.stHoming.bWithoutHoming) THEN	//bazowanie wyłączone true
		THIS^.stHoming.bIsNeeded		:= TRUE;	//ustaw że juz jest wybazowane
		THIS^.stHoming.cmdExecute.SetStepAsFinal ();
	ELSE
		THIS^.stHoming.iElementHomingStep	:= 0;
		THIS^.stHoming.cmdExecute.SetStepINC10 ();
	END_IF
	THIS^.stHoming.bIsNeeded			:= TRUE;
	HomingCycleInternal				:= TRUE;
10	:
	IF (NOT THIS^.HomingCycle ()) THEN
		THIS^.stHoming.cmdExecute.SetStepAsFinal ();
	END_IF
	HomingCycleInternal				:= TRUE;
GVL_BaseConstans.FINISH_STEP	:
	THIS^.stHoming.bIsNeeded			:= FALSE;	//ustaw że juz jest wybazowane
	HomingCycleInternal				:= FALSE;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomingGetBusy" Id="{33408a0d-042a-0f59-1e29-7ce625bb2198}" FolderPath="Bazowanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.05.2025		TC 4024.66
	Bazowanie w toku
*)
METHOD PUBLIC HomingGetBusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[HomingGetBusy		:= THIS^.stHoming.cmdExecute.GetBusy ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomingGetDone" Id="{07412dca-23e8-0c5a-0f20-99e739e31e10}" FolderPath="Bazowanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		31.03.2025		TC 4024.66
	Flaga że w tej sesji pracy maszyny element został już wybazowany
*)
METHOD PUBLIC HomingGetDone : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[HomingGetDone	:= THIS^.stHoming.cmdExecute.GetDone ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomingGetIsNeeded" Id="{d7ff01aa-0731-0a8c-12a1-791517d15581}" FolderPath="Bazowanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		11.04.2025		TC 4024.66
	Zwraca czy bazowanie jest potrzebne
*)
METHOD PUBLIC HomingGetIsNeeded : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[HomingGetIsNeeded			:= THIS^.stHoming.bIsNeeded;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomingSetWithoutHoming" Id="{5a5855af-d47a-0a6a-07f4-575e5afc713b}" FolderPath="Bazowanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		11.04.2025		TC 4024.66
	Ustawia czy element jest ma być bazowany czy nie
*)
METHOD PUBLIC HomingSetWithoutHoming : BOOL
VAR_INPUT
	bIN			: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stHoming.bWithoutHoming			:= bIN;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomingStart" Id="{31be6a6b-ec8a-0bec-3837-eb9aa93b3ee3}" FolderPath="Bazowanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		27.05.2025		TC 4024.66
	Uruchomienie metody bazowania
*)
METHOD PUBLIC HomingStart
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stHoming.cmdExecute.Execute ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsDoNothing" Id="{374d26a0-ec77-0904-0e68-6d5f8f41e3a2}" FolderPath="ITF_BaseControlElement\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		30.04.2025		TC 4024.66
	Zwraca czy element jest czymś zajety
*)
METHOD PUBLIC IsDoNothing : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsDoNothing				:= THIS^.bDoNothing;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsPosition0" Id="{b8caa6d7-84b6-0f11-0778-092adf43c4c2}" FolderPath="ITF_BaseControlElement\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		30.04.2025		TC 4024.66
	Zwraca czy element jest w pozycji 0 - referencyjnej
*)
METHOD PUBLIC IsPosition0 : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsPosition0				:= THIS^.bPosition0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsValidCommonData" Id="{c5bea3e9-5107-01a5-0892-d2a631bfb529}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC IsValidCommonData : BOOL
VAR_INPUT
END_VAR

VAR
	bResult: BOOL;
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bResult						:= SUPER^.IsValidCommonData ();

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO
	bResult					:= bResult AND THIS^.arrComponent [iI].IsValidCommonData ();
END_FOR

IsValidCommonData			:= bResult;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="JoinTheLogger" Id="{6f6c3a2f-1ef9-0d75-3b9a-48c4bdd1460d}" FolderPath="ITF_BaseComponent\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		07.10.2025		TC 4024.66
	Dodpisywanie się do listy logera
*)
METHOD PUBLIC JoinTheLogger : BOOL
VAR_INPUT
END_VAR

VAR
	bResult: BOOL;
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bResult			:= SUPER^.JoinTheLogger ();

FOR iI := 1 TO  TO_INT (THIS^.uiNumberOfComponents) DO
	bResult 	:= bResult AND THIS^.arrComponent [iI].JoinTheLogger ();
END_FOR

JoinTheLogger	:= bResult;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LinkCommonData" Id="{b42470a5-2d5d-0208-37a9-226f0cd025bb}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC LinkCommonData : BOOL
VAR_INPUT
	stCommonData				: REFERENCE TO ST_BaseCommonData;
END_VAR
VAR
	bResult						: BOOL;
	iI: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bResult							:= SUPER^.LinkCommonData (stCommonData := stCommonData);

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO
	bResult := bResult AND THIS^.arrComponent [iI].LinkCommonData (stCommonData := stCommonData);
END_FOR

LinkCommonData					:= bResult;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LinkSS1" Id="{49550dc1-69cc-02e6-2338-41a577cdb825}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC LinkSS1 : BOOL
VAR_INPUT
	fbSS1			: ITF_BaseFlagGet;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.itfSS1		:= fbSS1;

LinkSS1				:= THIS^.itfSS1 <> 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LinkSTO" Id="{e9338c59-044c-0f0a-0acf-ba143064a463}" FolderPath="WiazanieZmiennych\">
      <Declaration><![CDATA[METHOD PUBLIC LinkSTO : BOOL
VAR_INPUT
	fbSTO			: ITF_BaseFlagGet;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.itfSTO		:= fbSTO;

LinkSTO				:= THIS^.itfSTO <> 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerGetStatus" Id="{f37f9c4a-7710-0cee-1290-80230f49bdb4}" FolderPath="Zasilanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		31.03.2025		TC 4024.66
	Zwraca status zasilania	
*)
METHOD PUBLIC PowerGetStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[PowerGetStatus			:= THIS^.stPower.bStatus;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOffCycle" Id="{53e0dca8-4e5c-03cd-15fe-b8eef14ae467}" FolderPath="Zasilanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		13.10.2025		TC 4024.66
	Podstawowy cykl wyłączania zasilania. Dla Specyficznych urządzeń przeciążyć
*)
METHOD PROTECTED PowerOffCycle : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stPower.bStatus		:= FALSE;
PowerOffCycle				:= FALSE;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOnCycle" Id="{043b0c4d-ee30-0b8f-391b-0b2f137dacf9}" FolderPath="Zasilanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		13.10.2025		TC 4024.66
	Podstawowy cykl włączania zasilania. Dla Specyficznych urządzeń przeciążyć
*)
METHOD PROTECTED PowerOnCycle : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stPower.bStatus		:= TRUE;
PowerOnCycle				:= FALSE;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerTurnOff" Id="{6055b47c-5434-0f14-3d1a-3219a3d00404}" FolderPath="Zasilanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		31.03.2025		TC 4024.66
	Wyłączenie zasilania
*)
METHOD PUBLIC PowerTurnOff : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stPower.cmdTurnOff.Execute ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerTurnOffDone" Id="{d67bb72d-3578-0e6c-3f7b-37b3bb1e378c}" FolderPath="Zasilanie\">
      <Declaration><![CDATA[METHOD PUBLIC PowerTurnOffDone : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[PowerTurnOffDone		:= THIS^.stPower.cmdTurnOff.GetDone ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerTurnOffInProgress" Id="{ca077752-fb08-05a3-260b-900c56540db8}" FolderPath="Zasilanie\">
      <Declaration><![CDATA[METHOD PUBLIC PowerTurnOffInProgress : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[PowerTurnOffInProgress			:= THIS^.stPower.cmdTurnOff.GetBusy ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerTurnOn" Id="{2d017560-e541-07e0-08da-c8019890af49}" FolderPath="Zasilanie\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		31.03.2025		TC 4024.66
	Uruchomienie zasialania
*)
METHOD PUBLIC PowerTurnOn
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.stPower.cmdTurnOn.Execute ();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerTurnOnDone" Id="{5a08921d-4ec3-0d0c-0a87-c43711b026ed}" FolderPath="Zasilanie\">
      <Declaration><![CDATA[METHOD PUBLIC PowerTurnOnDone : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[PowerTurnOnDone		:= THIS^.stPower.cmdTurnOn.GetDone ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerTurnOnInProgress" Id="{508cb39c-d7a2-02bc-1a5e-05c8a3a0b75d}" FolderPath="Zasilanie\">
      <Declaration><![CDATA[METHOD PUBLIC PowerTurnOnInProgress : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[PowerTurnOnInProgress		:= THIS^.stPower.cmdTurnOn.GetBusy ();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetOperation" Id="{54ea1f37-360a-095c-2e4f-63fea602cb2f}" FolderPath="Reset\">
      <Declaration><![CDATA[METHOD PROTECTED ResetOperation : BOOL
VAR
	bResult				: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bResult					:= SUPER^.ResetOperation ();

THIS^.stHoming.bIsNeeded	:= TRUE;
THIS^.stHoming.cmdExecute.Abort ();
THIS^.stHoming.iChildHomingStep	:= 0;
THIS^.stHoming.iElementHomingStep	:= 0;

ResetOperation			:= FALSE OR bResult;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetCode" Id="{37dd4a69-1f19-013c-275a-96bfa9a71136}" FolderPath="ID\">
      <Declaration><![CDATA[METHOD PUBLIC SetCode
VAR_INPUT
	sCode							: STRING;
	sAdd							: STRING;
END_VAR
VAR
	sItemCode						: STRING;
	iI								: INT;
	sComponentCode					: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sItemCode		:=  CreateElementCode (sParentCode := sCode, sAdd := sAdd);
SUPER^.SetCode (sCode := sItemCode, sAdd := '');

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO
	sComponentCode	:= CreateElementCode (sParentCode := sItemCode, sAdd := TO_STRING (iI));
	THIS^.arrComponent [iI].SetCode (sCode	:= sComponentCode, sAdd := '');
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetEventsIDs" Id="{dc108b4c-3b69-0baa-3256-55757a5a651a}" FolderPath="Events\">
      <Declaration><![CDATA[(*			
	EVERDE sp. z o.o.
	Rafał Osajda		03.10.2025		TC 4024.66
	nadawanie unikalnych ID dla zdarzeń
*)
METHOD PUBLIC SetEventsIDs : UINT
VAR_INPUT
	uiNewID		: UINT;
END_VAR
VAR
	iI			: INT;
	uiLastID	: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[uiLastID		:= SUPER^.SetEventsIDs (uiNewID	:= uiNewID);

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO 
	uiLastID			:= THIS^.arrComponent [iI].SetEventsIDs (uiNewID	:= uiLastID);
END_FOR
SetEventsIDs				:= uiLastID;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetID" Id="{9d6c78d9-d779-0f26-1754-0cfd4425d778}" FolderPath="ID\">
      <Declaration><![CDATA[METHOD PUBLIC SetID : UINT
VAR_INPUT
	uiID					: UINT;
END_VAR
VAR
	uiLastID				: UINT;
	iI						: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[uiLastID				:= SUPER^.SetID (uiID	:= uiID);

FOR iI := 1 TO TO_INT (THIS^.uiNumberOfComponents) DO 
	uiLastID			:= THIS^.arrComponent [iI].SetID (uiID	:= uiLastID + 1);
END_FOR
SetID					:= uiLastID;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>